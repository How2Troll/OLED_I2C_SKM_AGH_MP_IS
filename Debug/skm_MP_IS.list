
skm_MP_IS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  08003f30  08003f30  00013f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc0  08004cc0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004cc0  08004cc0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cc0  08004cc0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cc0  08004cc0  00014cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000014  08004cdc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08004cdc  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008040  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001adc  00000000  00000000  0002807d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  00029b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002a3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017213  00000000  00000000  0002ab90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bac6  00000000  00000000  00041da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008197d  00000000  00000000  0004d869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf1e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020d0  00000000  00000000  000cf238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f18 	.word	0x08003f18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003f18 	.word	0x08003f18

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b0c      	ldr	r3, [pc, #48]	; (8000184 <MX_DMA_Init+0x38>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0b      	ldr	r2, [pc, #44]	; (8000184 <MX_DMA_Init+0x38>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b09      	ldr	r3, [pc, #36]	; (8000184 <MX_DMA_Init+0x38>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	2010      	movs	r0, #16
 8000170:	f000 fdc1 	bl	8000cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000174:	2010      	movs	r0, #16
 8000176:	f000 fdda 	bl	8000d2e <HAL_NVIC_EnableIRQ>

}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40021000 	.word	0x40021000

08000188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000188:	b480      	push	{r7}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800018e:	4b0e      	ldr	r3, [pc, #56]	; (80001c8 <MX_GPIO_Init+0x40>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	4a0d      	ldr	r2, [pc, #52]	; (80001c8 <MX_GPIO_Init+0x40>)
 8000194:	f043 0304 	orr.w	r3, r3, #4
 8000198:	6193      	str	r3, [r2, #24]
 800019a:	4b0b      	ldr	r3, [pc, #44]	; (80001c8 <MX_GPIO_Init+0x40>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	f003 0304 	and.w	r3, r3, #4
 80001a2:	607b      	str	r3, [r7, #4]
 80001a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a6:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <MX_GPIO_Init+0x40>)
 80001a8:	699b      	ldr	r3, [r3, #24]
 80001aa:	4a07      	ldr	r2, [pc, #28]	; (80001c8 <MX_GPIO_Init+0x40>)
 80001ac:	f043 0308 	orr.w	r3, r3, #8
 80001b0:	6193      	str	r3, [r2, #24]
 80001b2:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <MX_GPIO_Init+0x40>)
 80001b4:	699b      	ldr	r3, [r3, #24]
 80001b6:	f003 0308 	and.w	r3, r3, #8
 80001ba:	603b      	str	r3, [r7, #0]
 80001bc:	683b      	ldr	r3, [r7, #0]

}
 80001be:	bf00      	nop
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	40021000 	.word	0x40021000

080001cc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80001d0:	4b12      	ldr	r3, [pc, #72]	; (800021c <MX_I2C1_Init+0x50>)
 80001d2:	4a13      	ldr	r2, [pc, #76]	; (8000220 <MX_I2C1_Init+0x54>)
 80001d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80001d6:	4b11      	ldr	r3, [pc, #68]	; (800021c <MX_I2C1_Init+0x50>)
 80001d8:	4a12      	ldr	r2, [pc, #72]	; (8000224 <MX_I2C1_Init+0x58>)
 80001da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001dc:	4b0f      	ldr	r3, [pc, #60]	; (800021c <MX_I2C1_Init+0x50>)
 80001de:	2200      	movs	r2, #0
 80001e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80001e2:	4b0e      	ldr	r3, [pc, #56]	; (800021c <MX_I2C1_Init+0x50>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80001e8:	4b0c      	ldr	r3, [pc, #48]	; (800021c <MX_I2C1_Init+0x50>)
 80001ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80001ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80001f0:	4b0a      	ldr	r3, [pc, #40]	; (800021c <MX_I2C1_Init+0x50>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80001f6:	4b09      	ldr	r3, [pc, #36]	; (800021c <MX_I2C1_Init+0x50>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80001fc:	4b07      	ldr	r3, [pc, #28]	; (800021c <MX_I2C1_Init+0x50>)
 80001fe:	2200      	movs	r2, #0
 8000200:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000202:	4b06      	ldr	r3, [pc, #24]	; (800021c <MX_I2C1_Init+0x50>)
 8000204:	2200      	movs	r2, #0
 8000206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000208:	4804      	ldr	r0, [pc, #16]	; (800021c <MX_I2C1_Init+0x50>)
 800020a:	f001 f99f 	bl	800154c <HAL_I2C_Init>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000214:	f000 f8df 	bl	80003d6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000218:	bf00      	nop
 800021a:	bd80      	pop	{r7, pc}
 800021c:	20000030 	.word	0x20000030
 8000220:	40005400 	.word	0x40005400
 8000224:	00061a80 	.word	0x00061a80

08000228 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b088      	sub	sp, #32
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]
 800023c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a2d      	ldr	r2, [pc, #180]	; (80002f8 <HAL_I2C_MspInit+0xd0>)
 8000244:	4293      	cmp	r3, r2
 8000246:	d152      	bne.n	80002ee <HAL_I2C_MspInit+0xc6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000248:	4b2c      	ldr	r3, [pc, #176]	; (80002fc <HAL_I2C_MspInit+0xd4>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a2b      	ldr	r2, [pc, #172]	; (80002fc <HAL_I2C_MspInit+0xd4>)
 800024e:	f043 0308 	orr.w	r3, r3, #8
 8000252:	6193      	str	r3, [r2, #24]
 8000254:	4b29      	ldr	r3, [pc, #164]	; (80002fc <HAL_I2C_MspInit+0xd4>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	f003 0308 	and.w	r3, r3, #8
 800025c:	60fb      	str	r3, [r7, #12]
 800025e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000260:	23c0      	movs	r3, #192	; 0xc0
 8000262:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000264:	2312      	movs	r3, #18
 8000266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000268:	2303      	movs	r3, #3
 800026a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800026c:	f107 0310 	add.w	r3, r7, #16
 8000270:	4619      	mov	r1, r3
 8000272:	4823      	ldr	r0, [pc, #140]	; (8000300 <HAL_I2C_MspInit+0xd8>)
 8000274:	f000 ffe6 	bl	8001244 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000278:	4b20      	ldr	r3, [pc, #128]	; (80002fc <HAL_I2C_MspInit+0xd4>)
 800027a:	69db      	ldr	r3, [r3, #28]
 800027c:	4a1f      	ldr	r2, [pc, #124]	; (80002fc <HAL_I2C_MspInit+0xd4>)
 800027e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000282:	61d3      	str	r3, [r2, #28]
 8000284:	4b1d      	ldr	r3, [pc, #116]	; (80002fc <HAL_I2C_MspInit+0xd4>)
 8000286:	69db      	ldr	r3, [r3, #28]
 8000288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800028c:	60bb      	str	r3, [r7, #8]
 800028e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000290:	4b1c      	ldr	r3, [pc, #112]	; (8000304 <HAL_I2C_MspInit+0xdc>)
 8000292:	4a1d      	ldr	r2, [pc, #116]	; (8000308 <HAL_I2C_MspInit+0xe0>)
 8000294:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000296:	4b1b      	ldr	r3, [pc, #108]	; (8000304 <HAL_I2C_MspInit+0xdc>)
 8000298:	2210      	movs	r2, #16
 800029a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800029c:	4b19      	ldr	r3, [pc, #100]	; (8000304 <HAL_I2C_MspInit+0xdc>)
 800029e:	2200      	movs	r2, #0
 80002a0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80002a2:	4b18      	ldr	r3, [pc, #96]	; (8000304 <HAL_I2C_MspInit+0xdc>)
 80002a4:	2280      	movs	r2, #128	; 0x80
 80002a6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80002a8:	4b16      	ldr	r3, [pc, #88]	; (8000304 <HAL_I2C_MspInit+0xdc>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80002ae:	4b15      	ldr	r3, [pc, #84]	; (8000304 <HAL_I2C_MspInit+0xdc>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80002b4:	4b13      	ldr	r3, [pc, #76]	; (8000304 <HAL_I2C_MspInit+0xdc>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80002ba:	4b12      	ldr	r3, [pc, #72]	; (8000304 <HAL_I2C_MspInit+0xdc>)
 80002bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80002c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80002c2:	4810      	ldr	r0, [pc, #64]	; (8000304 <HAL_I2C_MspInit+0xdc>)
 80002c4:	f000 fd4e 	bl	8000d64 <HAL_DMA_Init>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 80002ce:	f000 f882 	bl	80003d6 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <HAL_I2C_MspInit+0xdc>)
 80002d6:	635a      	str	r2, [r3, #52]	; 0x34
 80002d8:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <HAL_I2C_MspInit+0xdc>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80002de:	2200      	movs	r2, #0
 80002e0:	2100      	movs	r1, #0
 80002e2:	201f      	movs	r0, #31
 80002e4:	f000 fd07 	bl	8000cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80002e8:	201f      	movs	r0, #31
 80002ea:	f000 fd20 	bl	8000d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80002ee:	bf00      	nop
 80002f0:	3720      	adds	r7, #32
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40005400 	.word	0x40005400
 80002fc:	40021000 	.word	0x40021000
 8000300:	40010c00 	.word	0x40010c00
 8000304:	20000084 	.word	0x20000084
 8000308:	4002006c 	.word	0x4002006c

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000310:	f000 fbb8 	bl	8000a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000314:	f000 f824 	bl	8000360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000318:	f7ff ff36 	bl	8000188 <MX_GPIO_Init>
  MX_DMA_Init();
 800031c:	f7ff ff16 	bl	800014c <MX_DMA_Init>
  MX_I2C1_Init();
 8000320:	f7ff ff54 	bl	80001cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  SSD1306_Init (); // initialize the display
 8000324:	f000 f85c 	bl	80003e0 <SSD1306_Init>

  SSD1306_GotoXY (10,10); // goto 10, 10
 8000328:	210a      	movs	r1, #10
 800032a:	200a      	movs	r0, #10
 800032c:	f000 f9c0 	bl	80006b0 <SSD1306_GotoXY>
  SSD1306_Puts ("TT", &Font_11x18, 1); // print Hello
 8000330:	2201      	movs	r2, #1
 8000332:	4908      	ldr	r1, [pc, #32]	; (8000354 <main+0x48>)
 8000334:	4808      	ldr	r0, [pc, #32]	; (8000358 <main+0x4c>)
 8000336:	f000 fa51 	bl	80007dc <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 800033a:	211e      	movs	r1, #30
 800033c:	200a      	movs	r0, #10
 800033e:	f000 f9b7 	bl	80006b0 <SSD1306_GotoXY>
  SSD1306_Puts ("DD!!", &Font_11x18, 1);
 8000342:	2201      	movs	r2, #1
 8000344:	4903      	ldr	r1, [pc, #12]	; (8000354 <main+0x48>)
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <main+0x50>)
 8000348:	f000 fa48 	bl	80007dc <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 800034c:	f000 f90c 	bl	8000568 <SSD1306_UpdateScreen>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000350:	e7fe      	b.n	8000350 <main+0x44>
 8000352:	bf00      	nop
 8000354:	20000000 	.word	0x20000000
 8000358:	08003f30 	.word	0x08003f30
 800035c:	08003f34 	.word	0x08003f34

08000360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b090      	sub	sp, #64	; 0x40
 8000364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	f107 0318 	add.w	r3, r7, #24
 800036a:	2228      	movs	r2, #40	; 0x28
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f003 fdca 	bl	8003f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000382:	2302      	movs	r3, #2
 8000384:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000386:	2301      	movs	r3, #1
 8000388:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800038a:	2310      	movs	r3, #16
 800038c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800038e:	2300      	movs	r3, #0
 8000390:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000392:	f107 0318 	add.w	r3, r7, #24
 8000396:	4618      	mov	r0, r3
 8000398:	f003 f98c 	bl	80036b4 <HAL_RCC_OscConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003a2:	f000 f818 	bl	80003d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a6:	230f      	movs	r3, #15
 80003a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f003 fbfa 	bl	8003bb8 <HAL_RCC_ClockConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003ca:	f000 f804 	bl	80003d6 <Error_Handler>
  }
}
 80003ce:	bf00      	nop
 80003d0:	3740      	adds	r7, #64	; 0x40
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003da:	b672      	cpsid	i
}
 80003dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003de:	e7fe      	b.n	80003de <Error_Handler+0x8>

080003e0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80003e6:	f000 fa1f 	bl	8000828 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80003ea:	f644 6320 	movw	r3, #20000	; 0x4e20
 80003ee:	2201      	movs	r2, #1
 80003f0:	2178      	movs	r1, #120	; 0x78
 80003f2:	485b      	ldr	r0, [pc, #364]	; (8000560 <SSD1306_Init+0x180>)
 80003f4:	f001 fb16 	bl	8001a24 <HAL_I2C_IsDeviceReady>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	e0a9      	b.n	8000556 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000402:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000406:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000408:	e002      	b.n	8000410 <SSD1306_Init+0x30>
		p--;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	3b01      	subs	r3, #1
 800040e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d1f9      	bne.n	800040a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000416:	22ae      	movs	r2, #174	; 0xae
 8000418:	2100      	movs	r1, #0
 800041a:	2078      	movs	r0, #120	; 0x78
 800041c:	f000 fa7c 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000420:	2220      	movs	r2, #32
 8000422:	2100      	movs	r1, #0
 8000424:	2078      	movs	r0, #120	; 0x78
 8000426:	f000 fa77 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800042a:	2210      	movs	r2, #16
 800042c:	2100      	movs	r1, #0
 800042e:	2078      	movs	r0, #120	; 0x78
 8000430:	f000 fa72 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000434:	22b0      	movs	r2, #176	; 0xb0
 8000436:	2100      	movs	r1, #0
 8000438:	2078      	movs	r0, #120	; 0x78
 800043a:	f000 fa6d 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800043e:	22c8      	movs	r2, #200	; 0xc8
 8000440:	2100      	movs	r1, #0
 8000442:	2078      	movs	r0, #120	; 0x78
 8000444:	f000 fa68 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000448:	2200      	movs	r2, #0
 800044a:	2100      	movs	r1, #0
 800044c:	2078      	movs	r0, #120	; 0x78
 800044e:	f000 fa63 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000452:	2210      	movs	r2, #16
 8000454:	2100      	movs	r1, #0
 8000456:	2078      	movs	r0, #120	; 0x78
 8000458:	f000 fa5e 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800045c:	2240      	movs	r2, #64	; 0x40
 800045e:	2100      	movs	r1, #0
 8000460:	2078      	movs	r0, #120	; 0x78
 8000462:	f000 fa59 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000466:	2281      	movs	r2, #129	; 0x81
 8000468:	2100      	movs	r1, #0
 800046a:	2078      	movs	r0, #120	; 0x78
 800046c:	f000 fa54 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000470:	22ff      	movs	r2, #255	; 0xff
 8000472:	2100      	movs	r1, #0
 8000474:	2078      	movs	r0, #120	; 0x78
 8000476:	f000 fa4f 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800047a:	22a1      	movs	r2, #161	; 0xa1
 800047c:	2100      	movs	r1, #0
 800047e:	2078      	movs	r0, #120	; 0x78
 8000480:	f000 fa4a 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000484:	22a6      	movs	r2, #166	; 0xa6
 8000486:	2100      	movs	r1, #0
 8000488:	2078      	movs	r0, #120	; 0x78
 800048a:	f000 fa45 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800048e:	22a8      	movs	r2, #168	; 0xa8
 8000490:	2100      	movs	r1, #0
 8000492:	2078      	movs	r0, #120	; 0x78
 8000494:	f000 fa40 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000498:	223f      	movs	r2, #63	; 0x3f
 800049a:	2100      	movs	r1, #0
 800049c:	2078      	movs	r0, #120	; 0x78
 800049e:	f000 fa3b 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80004a2:	22a4      	movs	r2, #164	; 0xa4
 80004a4:	2100      	movs	r1, #0
 80004a6:	2078      	movs	r0, #120	; 0x78
 80004a8:	f000 fa36 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80004ac:	22d3      	movs	r2, #211	; 0xd3
 80004ae:	2100      	movs	r1, #0
 80004b0:	2078      	movs	r0, #120	; 0x78
 80004b2:	f000 fa31 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80004b6:	2200      	movs	r2, #0
 80004b8:	2100      	movs	r1, #0
 80004ba:	2078      	movs	r0, #120	; 0x78
 80004bc:	f000 fa2c 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80004c0:	22d5      	movs	r2, #213	; 0xd5
 80004c2:	2100      	movs	r1, #0
 80004c4:	2078      	movs	r0, #120	; 0x78
 80004c6:	f000 fa27 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80004ca:	22f0      	movs	r2, #240	; 0xf0
 80004cc:	2100      	movs	r1, #0
 80004ce:	2078      	movs	r0, #120	; 0x78
 80004d0:	f000 fa22 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80004d4:	22d9      	movs	r2, #217	; 0xd9
 80004d6:	2100      	movs	r1, #0
 80004d8:	2078      	movs	r0, #120	; 0x78
 80004da:	f000 fa1d 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80004de:	2222      	movs	r2, #34	; 0x22
 80004e0:	2100      	movs	r1, #0
 80004e2:	2078      	movs	r0, #120	; 0x78
 80004e4:	f000 fa18 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80004e8:	22da      	movs	r2, #218	; 0xda
 80004ea:	2100      	movs	r1, #0
 80004ec:	2078      	movs	r0, #120	; 0x78
 80004ee:	f000 fa13 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80004f2:	2212      	movs	r2, #18
 80004f4:	2100      	movs	r1, #0
 80004f6:	2078      	movs	r0, #120	; 0x78
 80004f8:	f000 fa0e 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80004fc:	22db      	movs	r2, #219	; 0xdb
 80004fe:	2100      	movs	r1, #0
 8000500:	2078      	movs	r0, #120	; 0x78
 8000502:	f000 fa09 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000506:	2220      	movs	r2, #32
 8000508:	2100      	movs	r1, #0
 800050a:	2078      	movs	r0, #120	; 0x78
 800050c:	f000 fa04 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000510:	228d      	movs	r2, #141	; 0x8d
 8000512:	2100      	movs	r1, #0
 8000514:	2078      	movs	r0, #120	; 0x78
 8000516:	f000 f9ff 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800051a:	2214      	movs	r2, #20
 800051c:	2100      	movs	r1, #0
 800051e:	2078      	movs	r0, #120	; 0x78
 8000520:	f000 f9fa 	bl	8000918 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000524:	22af      	movs	r2, #175	; 0xaf
 8000526:	2100      	movs	r1, #0
 8000528:	2078      	movs	r0, #120	; 0x78
 800052a:	f000 f9f5 	bl	8000918 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800052e:	222e      	movs	r2, #46	; 0x2e
 8000530:	2100      	movs	r1, #0
 8000532:	2078      	movs	r0, #120	; 0x78
 8000534:	f000 f9f0 	bl	8000918 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000538:	2000      	movs	r0, #0
 800053a:	f000 f843 	bl	80005c4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800053e:	f000 f813 	bl	8000568 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <SSD1306_Init+0x184>)
 8000544:	2200      	movs	r2, #0
 8000546:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <SSD1306_Init+0x184>)
 800054a:	2200      	movs	r2, #0
 800054c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <SSD1306_Init+0x184>)
 8000550:	2201      	movs	r2, #1
 8000552:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000554:	2301      	movs	r3, #1
}
 8000556:	4618      	mov	r0, r3
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000030 	.word	0x20000030
 8000564:	200004c8 	.word	0x200004c8

08000568 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800056e:	2300      	movs	r3, #0
 8000570:	71fb      	strb	r3, [r7, #7]
 8000572:	e01d      	b.n	80005b0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	3b50      	subs	r3, #80	; 0x50
 8000578:	b2db      	uxtb	r3, r3
 800057a:	461a      	mov	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	2078      	movs	r0, #120	; 0x78
 8000580:	f000 f9ca 	bl	8000918 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000584:	2200      	movs	r2, #0
 8000586:	2100      	movs	r1, #0
 8000588:	2078      	movs	r0, #120	; 0x78
 800058a:	f000 f9c5 	bl	8000918 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800058e:	2210      	movs	r2, #16
 8000590:	2100      	movs	r1, #0
 8000592:	2078      	movs	r0, #120	; 0x78
 8000594:	f000 f9c0 	bl	8000918 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	01db      	lsls	r3, r3, #7
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <SSD1306_UpdateScreen+0x58>)
 800059e:	441a      	add	r2, r3
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	2140      	movs	r1, #64	; 0x40
 80005a4:	2078      	movs	r0, #120	; 0x78
 80005a6:	f000 f953 	bl	8000850 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	3301      	adds	r3, #1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	2b07      	cmp	r3, #7
 80005b4:	d9de      	bls.n	8000574 <SSD1306_UpdateScreen+0xc>
	}
}
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200000c8 	.word	0x200000c8

080005c4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d101      	bne.n	80005d8 <SSD1306_Fill+0x14>
 80005d4:	2300      	movs	r3, #0
 80005d6:	e000      	b.n	80005da <SSD1306_Fill+0x16>
 80005d8:	23ff      	movs	r3, #255	; 0xff
 80005da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005de:	4619      	mov	r1, r3
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <SSD1306_Fill+0x2c>)
 80005e2:	f003 fc91 	bl	8003f08 <memset>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000c8 	.word	0x200000c8

080005f4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
 80005fe:	460b      	mov	r3, r1
 8000600:	80bb      	strh	r3, [r7, #4]
 8000602:	4613      	mov	r3, r2
 8000604:	70fb      	strb	r3, [r7, #3]
	if (
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	2b7f      	cmp	r3, #127	; 0x7f
 800060a:	d848      	bhi.n	800069e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800060c:	88bb      	ldrh	r3, [r7, #4]
 800060e:	2b3f      	cmp	r3, #63	; 0x3f
 8000610:	d845      	bhi.n	800069e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <SSD1306_DrawPixel+0xb4>)
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d006      	beq.n	8000628 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800061a:	78fb      	ldrb	r3, [r7, #3]
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf0c      	ite	eq
 8000620:	2301      	moveq	r3, #1
 8000622:	2300      	movne	r3, #0
 8000624:	b2db      	uxtb	r3, r3
 8000626:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000628:	78fb      	ldrb	r3, [r7, #3]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d11a      	bne.n	8000664 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800062e:	88fa      	ldrh	r2, [r7, #6]
 8000630:	88bb      	ldrh	r3, [r7, #4]
 8000632:	08db      	lsrs	r3, r3, #3
 8000634:	b298      	uxth	r0, r3
 8000636:	4603      	mov	r3, r0
 8000638:	01db      	lsls	r3, r3, #7
 800063a:	4413      	add	r3, r2
 800063c:	4a1b      	ldr	r2, [pc, #108]	; (80006ac <SSD1306_DrawPixel+0xb8>)
 800063e:	5cd3      	ldrb	r3, [r2, r3]
 8000640:	b25a      	sxtb	r2, r3
 8000642:	88bb      	ldrh	r3, [r7, #4]
 8000644:	f003 0307 	and.w	r3, r3, #7
 8000648:	2101      	movs	r1, #1
 800064a:	fa01 f303 	lsl.w	r3, r1, r3
 800064e:	b25b      	sxtb	r3, r3
 8000650:	4313      	orrs	r3, r2
 8000652:	b259      	sxtb	r1, r3
 8000654:	88fa      	ldrh	r2, [r7, #6]
 8000656:	4603      	mov	r3, r0
 8000658:	01db      	lsls	r3, r3, #7
 800065a:	4413      	add	r3, r2
 800065c:	b2c9      	uxtb	r1, r1
 800065e:	4a13      	ldr	r2, [pc, #76]	; (80006ac <SSD1306_DrawPixel+0xb8>)
 8000660:	54d1      	strb	r1, [r2, r3]
 8000662:	e01d      	b.n	80006a0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000664:	88fa      	ldrh	r2, [r7, #6]
 8000666:	88bb      	ldrh	r3, [r7, #4]
 8000668:	08db      	lsrs	r3, r3, #3
 800066a:	b298      	uxth	r0, r3
 800066c:	4603      	mov	r3, r0
 800066e:	01db      	lsls	r3, r3, #7
 8000670:	4413      	add	r3, r2
 8000672:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <SSD1306_DrawPixel+0xb8>)
 8000674:	5cd3      	ldrb	r3, [r2, r3]
 8000676:	b25a      	sxtb	r2, r3
 8000678:	88bb      	ldrh	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	2101      	movs	r1, #1
 8000680:	fa01 f303 	lsl.w	r3, r1, r3
 8000684:	b25b      	sxtb	r3, r3
 8000686:	43db      	mvns	r3, r3
 8000688:	b25b      	sxtb	r3, r3
 800068a:	4013      	ands	r3, r2
 800068c:	b259      	sxtb	r1, r3
 800068e:	88fa      	ldrh	r2, [r7, #6]
 8000690:	4603      	mov	r3, r0
 8000692:	01db      	lsls	r3, r3, #7
 8000694:	4413      	add	r3, r2
 8000696:	b2c9      	uxtb	r1, r1
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <SSD1306_DrawPixel+0xb8>)
 800069a:	54d1      	strb	r1, [r2, r3]
 800069c:	e000      	b.n	80006a0 <SSD1306_DrawPixel+0xac>
		return;
 800069e:	bf00      	nop
	}
}
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	200004c8 	.word	0x200004c8
 80006ac:	200000c8 	.word	0x200000c8

080006b0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	460a      	mov	r2, r1
 80006ba:	80fb      	strh	r3, [r7, #6]
 80006bc:	4613      	mov	r3, r2
 80006be:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80006c0:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <SSD1306_GotoXY+0x28>)
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80006c6:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <SSD1306_GotoXY+0x28>)
 80006c8:	88bb      	ldrh	r3, [r7, #4]
 80006ca:	8053      	strh	r3, [r2, #2]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200004c8 	.word	0x200004c8

080006dc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80006ec:	4b3a      	ldr	r3, [pc, #232]	; (80007d8 <SSD1306_Putc+0xfc>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	4413      	add	r3, r2
	if (
 80006f8:	2b7f      	cmp	r3, #127	; 0x7f
 80006fa:	dc07      	bgt.n	800070c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80006fc:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <SSD1306_Putc+0xfc>)
 80006fe:	885b      	ldrh	r3, [r3, #2]
 8000700:	461a      	mov	r2, r3
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000708:	2b3f      	cmp	r3, #63	; 0x3f
 800070a:	dd01      	ble.n	8000710 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800070c:	2300      	movs	r3, #0
 800070e:	e05e      	b.n	80007ce <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	e04b      	b.n	80007ae <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	3b20      	subs	r3, #32
 800071e:	6839      	ldr	r1, [r7, #0]
 8000720:	7849      	ldrb	r1, [r1, #1]
 8000722:	fb01 f303 	mul.w	r3, r1, r3
 8000726:	4619      	mov	r1, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	440b      	add	r3, r1
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4413      	add	r3, r2
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	e030      	b.n	800079c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d010      	beq.n	800076c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <SSD1306_Putc+0xfc>)
 800074c:	881a      	ldrh	r2, [r3, #0]
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	b29b      	uxth	r3, r3
 8000752:	4413      	add	r3, r2
 8000754:	b298      	uxth	r0, r3
 8000756:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <SSD1306_Putc+0xfc>)
 8000758:	885a      	ldrh	r2, [r3, #2]
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	b29b      	uxth	r3, r3
 800075e:	4413      	add	r3, r2
 8000760:	b29b      	uxth	r3, r3
 8000762:	79ba      	ldrb	r2, [r7, #6]
 8000764:	4619      	mov	r1, r3
 8000766:	f7ff ff45 	bl	80005f4 <SSD1306_DrawPixel>
 800076a:	e014      	b.n	8000796 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <SSD1306_Putc+0xfc>)
 800076e:	881a      	ldrh	r2, [r3, #0]
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	b29b      	uxth	r3, r3
 8000774:	4413      	add	r3, r2
 8000776:	b298      	uxth	r0, r3
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <SSD1306_Putc+0xfc>)
 800077a:	885a      	ldrh	r2, [r3, #2]
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	b29b      	uxth	r3, r3
 8000780:	4413      	add	r3, r2
 8000782:	b299      	uxth	r1, r3
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	2b00      	cmp	r3, #0
 8000788:	bf0c      	ite	eq
 800078a:	2301      	moveq	r3, #1
 800078c:	2300      	movne	r3, #0
 800078e:	b2db      	uxtb	r3, r3
 8000790:	461a      	mov	r2, r3
 8000792:	f7ff ff2f 	bl	80005f4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	3301      	adds	r3, #1
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d3c8      	bcc.n	800073a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	3301      	adds	r3, #1
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	785b      	ldrb	r3, [r3, #1]
 80007b2:	461a      	mov	r2, r3
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d3ad      	bcc.n	8000716 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <SSD1306_Putc+0xfc>)
 80007bc:	881a      	ldrh	r2, [r3, #0]
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	4413      	add	r3, r2
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <SSD1306_Putc+0xfc>)
 80007ca:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80007cc:	79fb      	ldrb	r3, [r7, #7]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200004c8 	.word	0x200004c8

080007dc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	4613      	mov	r3, r2
 80007e8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80007ea:	e012      	b.n	8000812 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	79fa      	ldrb	r2, [r7, #7]
 80007f2:	68b9      	ldr	r1, [r7, #8]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff71 	bl	80006dc <SSD1306_Putc>
 80007fa:	4603      	mov	r3, r0
 80007fc:	461a      	mov	r2, r3
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	429a      	cmp	r2, r3
 8000804:	d002      	beq.n	800080c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	e008      	b.n	800081e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3301      	adds	r3, #1
 8000810:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d1e8      	bne.n	80007ec <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	781b      	ldrb	r3, [r3, #0]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <ssd1306_I2C_Init+0x24>)
 8000830:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000832:	e002      	b.n	800083a <ssd1306_I2C_Init+0x12>
		p--;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3b01      	subs	r3, #1
 8000838:	607b      	str	r3, [r7, #4]
	while(p>0)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1f9      	bne.n	8000834 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	0003d090 	.word	0x0003d090

08000850 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b0c5      	sub	sp, #276	; 0x114
 8000854:	af00      	add	r7, sp, #0
 8000856:	4604      	mov	r4, r0
 8000858:	4608      	mov	r0, r1
 800085a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800085e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000862:	600a      	str	r2, [r1, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800086a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800086e:	4622      	mov	r2, r4
 8000870:	701a      	strb	r2, [r3, #0]
 8000872:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000876:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800087a:	4602      	mov	r2, r0
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000882:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000886:	460a      	mov	r2, r1
 8000888:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800088a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800088e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000892:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000896:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800089a:	7812      	ldrb	r2, [r2, #0]
 800089c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800089e:	2300      	movs	r3, #0
 80008a0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80008a4:	e015      	b.n	80008d2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80008a6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008aa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80008ae:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80008b2:	6812      	ldr	r2, [r2, #0]
 80008b4:	441a      	add	r2, r3
 80008b6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008ba:	3301      	adds	r3, #1
 80008bc:	7811      	ldrb	r1, [r2, #0]
 80008be:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80008c2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80008c6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80008c8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008cc:	3301      	adds	r3, #1
 80008ce:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80008d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80008dc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80008e0:	8812      	ldrh	r2, [r2, #0]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d8df      	bhi.n	80008a6 <ssd1306_I2C_WriteMulti+0x56>
//HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, count+1);
 80008e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008ea:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b299      	uxth	r1, r3
 80008f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	b29b      	uxth	r3, r3
 8000900:	f107 020c 	add.w	r2, r7, #12
 8000904:	4803      	ldr	r0, [pc, #12]	; (8000914 <ssd1306_I2C_WriteMulti+0xc4>)
 8000906:	f000 ff65 	bl	80017d4 <HAL_I2C_Master_Transmit_DMA>
}
 800090a:	bf00      	nop
 800090c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000910:	46bd      	mov	sp, r7
 8000912:	bd90      	pop	{r4, r7, pc}
 8000914:	20000030 	.word	0x20000030

08000918 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
 8000922:	460b      	mov	r3, r1
 8000924:	71bb      	strb	r3, [r7, #6]
 8000926:	4613      	mov	r3, r2
 8000928:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800092a:	79bb      	ldrb	r3, [r7, #6]
 800092c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800092e:	797b      	ldrb	r3, [r7, #5]
 8000930:	737b      	strb	r3, [r7, #13]
	//HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
	//HAL_I2C_Master_Transmit(hi2c, DevAddress, pData, Size, Timeout);
	//HAL_I2C_Master_Transmit_DMA(hi2c, DevAddress, pData, Size);

	HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, 2);
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	b299      	uxth	r1, r3
 8000936:	f107 020c 	add.w	r2, r7, #12
 800093a:	2302      	movs	r3, #2
 800093c:	4803      	ldr	r0, [pc, #12]	; (800094c <ssd1306_I2C_Write+0x34>)
 800093e:	f000 ff49 	bl	80017d4 <HAL_I2C_Master_Transmit_DMA>
}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000030 	.word	0x20000030

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_MspInit+0x5c>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	4a14      	ldr	r2, [pc, #80]	; (80009ac <HAL_MspInit+0x5c>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6193      	str	r3, [r2, #24]
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_MspInit+0x5c>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_MspInit+0x5c>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <HAL_MspInit+0x5c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	61d3      	str	r3, [r2, #28]
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <HAL_MspInit+0x5c>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <HAL_MspInit+0x60>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_MspInit+0x60>)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40010000 	.word	0x40010000

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x4>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr

080009de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr

080009ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr

080009f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fa:	f000 f889 	bl	8000b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <DMA1_Channel6_IRQHandler+0x10>)
 8000a0a:	f000 fadb 	bl	8000fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000084 	.word	0x20000084

08000a18 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <I2C1_EV_IRQHandler+0x10>)
 8000a1e:	f001 f92f 	bl	8001c80 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000030 	.word	0x20000030

08000a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a3a:	490d      	ldr	r1, [pc, #52]	; (8000a70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a50:	4c0a      	ldr	r4, [pc, #40]	; (8000a7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a5e:	f7ff ffe5 	bl	8000a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a62:	f003 fa2d 	bl	8003ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a66:	f7ff fc51 	bl	800030c <main>
  bx lr
 8000a6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a74:	08004cc8 	.word	0x08004cc8
  ldr r2, =_sbss
 8000a78:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a7c:	200004d4 	.word	0x200004d4

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>
	...

08000a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_Init+0x28>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <HAL_Init+0x28>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f923 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	f000 f808 	bl	8000ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa0:	f7ff ff56 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40022000 	.word	0x40022000

08000ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_InitTick+0x54>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x58>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f93b 	bl	8000d4a <HAL_SYSTICK_Config>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00e      	b.n	8000afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d80a      	bhi.n	8000afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f000 f903 	bl	8000cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <HAL_InitTick+0x5c>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e000      	b.n	8000afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000010 	.word	0x20000010
 8000b0c:	2000000c 	.word	0x2000000c

08000b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_IncTick+0x1c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_IncTick+0x20>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <HAL_IncTick+0x20>)
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	20000010 	.word	0x20000010
 8000b30:	200004d0 	.word	0x200004d0

08000b34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b02      	ldr	r3, [pc, #8]	; (8000b44 <HAL_GetTick+0x10>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	200004d0 	.word	0x200004d0

08000b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b64:	4013      	ands	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	60d3      	str	r3, [r2, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	f003 0307 	and.w	r3, r3, #7
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db0b      	blt.n	8000bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 021f 	and.w	r2, r3, #31
 8000bc4:	4906      	ldr	r1, [pc, #24]	; (8000be0 <__NVIC_EnableIRQ+0x34>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	095b      	lsrs	r3, r3, #5
 8000bcc:	2001      	movs	r0, #1
 8000bce:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0a      	blt.n	8000c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	490c      	ldr	r1, [pc, #48]	; (8000c30 <__NVIC_SetPriority+0x4c>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c0c:	e00a      	b.n	8000c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4908      	ldr	r1, [pc, #32]	; (8000c34 <__NVIC_SetPriority+0x50>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f1c3 0307 	rsb	r3, r3, #7
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	bf28      	it	cs
 8000c56:	2304      	movcs	r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d902      	bls.n	8000c68 <NVIC_EncodePriority+0x30>
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3b03      	subs	r3, #3
 8000c66:	e000      	b.n	8000c6a <NVIC_EncodePriority+0x32>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	4313      	orrs	r3, r2
         );
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3724      	adds	r7, #36	; 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f7ff ff90 	bl	8000be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff2d 	bl	8000b48 <__NVIC_SetPriorityGrouping>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d08:	f7ff ff42 	bl	8000b90 <__NVIC_GetPriorityGrouping>
 8000d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f7ff ff90 	bl	8000c38 <NVIC_EncodePriority>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff5f 	bl	8000be4 <__NVIC_SetPriority>
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff35 	bl	8000bac <__NVIC_EnableIRQ>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffa2 	bl	8000c9c <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e043      	b.n	8000e02 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <HAL_DMA_Init+0xa8>)
 8000d82:	4413      	add	r3, r2
 8000d84:	4a22      	ldr	r2, [pc, #136]	; (8000e10 <HAL_DMA_Init+0xac>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	009a      	lsls	r2, r3, #2
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a1f      	ldr	r2, [pc, #124]	; (8000e14 <HAL_DMA_Init+0xb0>)
 8000d96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000dae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000db2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2201      	movs	r2, #1
 8000df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	bffdfff8 	.word	0xbffdfff8
 8000e10:	cccccccd 	.word	0xcccccccd
 8000e14:	40020000 	.word	0x40020000

08000e18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d101      	bne.n	8000e38 <HAL_DMA_Start_IT+0x20>
 8000e34:	2302      	movs	r3, #2
 8000e36:	e04a      	b.n	8000ece <HAL_DMA_Start_IT+0xb6>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d13a      	bne.n	8000ec0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2200      	movs	r2, #0
 8000e56:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 0201 	bic.w	r2, r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f000 f9ba 	bl	80011e8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d008      	beq.n	8000e8e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 020e 	orr.w	r2, r2, #14
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	e00f      	b.n	8000eae <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0204 	bic.w	r2, r2, #4
 8000e9c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f042 020a 	orr.w	r2, r2, #10
 8000eac:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f042 0201 	orr.w	r2, r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	e005      	b.n	8000ecc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d005      	beq.n	8000efa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e051      	b.n	8000f9e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 020e 	bic.w	r2, r2, #14
 8000f08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0201 	bic.w	r2, r2, #1
 8000f18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <HAL_DMA_Abort_IT+0xd0>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d029      	beq.n	8000f78 <HAL_DMA_Abort_IT+0xa0>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a20      	ldr	r2, [pc, #128]	; (8000fac <HAL_DMA_Abort_IT+0xd4>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d022      	beq.n	8000f74 <HAL_DMA_Abort_IT+0x9c>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a1f      	ldr	r2, [pc, #124]	; (8000fb0 <HAL_DMA_Abort_IT+0xd8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d01a      	beq.n	8000f6e <HAL_DMA_Abort_IT+0x96>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <HAL_DMA_Abort_IT+0xdc>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d012      	beq.n	8000f68 <HAL_DMA_Abort_IT+0x90>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <HAL_DMA_Abort_IT+0xe0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d00a      	beq.n	8000f62 <HAL_DMA_Abort_IT+0x8a>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a1a      	ldr	r2, [pc, #104]	; (8000fbc <HAL_DMA_Abort_IT+0xe4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d102      	bne.n	8000f5c <HAL_DMA_Abort_IT+0x84>
 8000f56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f5a:	e00e      	b.n	8000f7a <HAL_DMA_Abort_IT+0xa2>
 8000f5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f60:	e00b      	b.n	8000f7a <HAL_DMA_Abort_IT+0xa2>
 8000f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f66:	e008      	b.n	8000f7a <HAL_DMA_Abort_IT+0xa2>
 8000f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6c:	e005      	b.n	8000f7a <HAL_DMA_Abort_IT+0xa2>
 8000f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f72:	e002      	b.n	8000f7a <HAL_DMA_Abort_IT+0xa2>
 8000f74:	2310      	movs	r3, #16
 8000f76:	e000      	b.n	8000f7a <HAL_DMA_Abort_IT+0xa2>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <HAL_DMA_Abort_IT+0xe8>)
 8000f7c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	4798      	blx	r3
    } 
  }
  return status;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40020008 	.word	0x40020008
 8000fac:	4002001c 	.word	0x4002001c
 8000fb0:	40020030 	.word	0x40020030
 8000fb4:	40020044 	.word	0x40020044
 8000fb8:	40020058 	.word	0x40020058
 8000fbc:	4002006c 	.word	0x4002006c
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d04f      	beq.n	800108c <HAL_DMA_IRQHandler+0xc8>
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d04a      	beq.n	800108c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0320 	and.w	r3, r3, #32
 8001000:	2b00      	cmp	r3, #0
 8001002:	d107      	bne.n	8001014 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0204 	bic.w	r2, r2, #4
 8001012:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a66      	ldr	r2, [pc, #408]	; (80011b4 <HAL_DMA_IRQHandler+0x1f0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d029      	beq.n	8001072 <HAL_DMA_IRQHandler+0xae>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a65      	ldr	r2, [pc, #404]	; (80011b8 <HAL_DMA_IRQHandler+0x1f4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d022      	beq.n	800106e <HAL_DMA_IRQHandler+0xaa>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a63      	ldr	r2, [pc, #396]	; (80011bc <HAL_DMA_IRQHandler+0x1f8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d01a      	beq.n	8001068 <HAL_DMA_IRQHandler+0xa4>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a62      	ldr	r2, [pc, #392]	; (80011c0 <HAL_DMA_IRQHandler+0x1fc>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d012      	beq.n	8001062 <HAL_DMA_IRQHandler+0x9e>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a60      	ldr	r2, [pc, #384]	; (80011c4 <HAL_DMA_IRQHandler+0x200>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00a      	beq.n	800105c <HAL_DMA_IRQHandler+0x98>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a5f      	ldr	r2, [pc, #380]	; (80011c8 <HAL_DMA_IRQHandler+0x204>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d102      	bne.n	8001056 <HAL_DMA_IRQHandler+0x92>
 8001050:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001054:	e00e      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 8001056:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800105a:	e00b      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 800105c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001060:	e008      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 8001062:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001066:	e005      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 8001068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106c:	e002      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 800106e:	2340      	movs	r3, #64	; 0x40
 8001070:	e000      	b.n	8001074 <HAL_DMA_IRQHandler+0xb0>
 8001072:	2304      	movs	r3, #4
 8001074:	4a55      	ldr	r2, [pc, #340]	; (80011cc <HAL_DMA_IRQHandler+0x208>)
 8001076:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 8094 	beq.w	80011aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800108a:	e08e      	b.n	80011aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	2202      	movs	r2, #2
 8001092:	409a      	lsls	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4013      	ands	r3, r2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d056      	beq.n	800114a <HAL_DMA_IRQHandler+0x186>
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d051      	beq.n	800114a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0320 	and.w	r3, r3, #32
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10b      	bne.n	80010cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 020a 	bic.w	r2, r2, #10
 80010c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a38      	ldr	r2, [pc, #224]	; (80011b4 <HAL_DMA_IRQHandler+0x1f0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d029      	beq.n	800112a <HAL_DMA_IRQHandler+0x166>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a37      	ldr	r2, [pc, #220]	; (80011b8 <HAL_DMA_IRQHandler+0x1f4>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d022      	beq.n	8001126 <HAL_DMA_IRQHandler+0x162>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a35      	ldr	r2, [pc, #212]	; (80011bc <HAL_DMA_IRQHandler+0x1f8>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d01a      	beq.n	8001120 <HAL_DMA_IRQHandler+0x15c>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a34      	ldr	r2, [pc, #208]	; (80011c0 <HAL_DMA_IRQHandler+0x1fc>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d012      	beq.n	800111a <HAL_DMA_IRQHandler+0x156>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a32      	ldr	r2, [pc, #200]	; (80011c4 <HAL_DMA_IRQHandler+0x200>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d00a      	beq.n	8001114 <HAL_DMA_IRQHandler+0x150>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a31      	ldr	r2, [pc, #196]	; (80011c8 <HAL_DMA_IRQHandler+0x204>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d102      	bne.n	800110e <HAL_DMA_IRQHandler+0x14a>
 8001108:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800110c:	e00e      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 800110e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001112:	e00b      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 8001114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001118:	e008      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 800111a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111e:	e005      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 8001120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001124:	e002      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 8001126:	2320      	movs	r3, #32
 8001128:	e000      	b.n	800112c <HAL_DMA_IRQHandler+0x168>
 800112a:	2302      	movs	r3, #2
 800112c:	4a27      	ldr	r2, [pc, #156]	; (80011cc <HAL_DMA_IRQHandler+0x208>)
 800112e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113c:	2b00      	cmp	r3, #0
 800113e:	d034      	beq.n	80011aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001148:	e02f      	b.n	80011aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	2208      	movs	r2, #8
 8001150:	409a      	lsls	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d028      	beq.n	80011ac <HAL_DMA_IRQHandler+0x1e8>
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	2b00      	cmp	r3, #0
 8001162:	d023      	beq.n	80011ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 020e 	bic.w	r2, r2, #14
 8001172:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117c:	2101      	movs	r1, #1
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	4798      	blx	r3
    }
  }
  return;
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
}
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40020008 	.word	0x40020008
 80011b8:	4002001c 	.word	0x4002001c
 80011bc:	40020030 	.word	0x40020030
 80011c0:	40020044 	.word	0x40020044
 80011c4:	40020058 	.word	0x40020058
 80011c8:	4002006c 	.word	0x4002006c
 80011cc:	40020000 	.word	0x40020000

080011d0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011fe:	2101      	movs	r1, #1
 8001200:	fa01 f202 	lsl.w	r2, r1, r2
 8001204:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b10      	cmp	r3, #16
 8001214:	d108      	bne.n	8001228 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001226:	e007      	b.n	8001238 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	60da      	str	r2, [r3, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
	...

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b480      	push	{r7}
 8001246:	b08b      	sub	sp, #44	; 0x2c
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001256:	e169      	b.n	800152c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001258:	2201      	movs	r2, #1
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	429a      	cmp	r2, r3
 8001272:	f040 8158 	bne.w	8001526 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4a9a      	ldr	r2, [pc, #616]	; (80014e4 <HAL_GPIO_Init+0x2a0>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d05e      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 8001280:	4a98      	ldr	r2, [pc, #608]	; (80014e4 <HAL_GPIO_Init+0x2a0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d875      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 8001286:	4a98      	ldr	r2, [pc, #608]	; (80014e8 <HAL_GPIO_Init+0x2a4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d058      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 800128c:	4a96      	ldr	r2, [pc, #600]	; (80014e8 <HAL_GPIO_Init+0x2a4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d86f      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 8001292:	4a96      	ldr	r2, [pc, #600]	; (80014ec <HAL_GPIO_Init+0x2a8>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d052      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 8001298:	4a94      	ldr	r2, [pc, #592]	; (80014ec <HAL_GPIO_Init+0x2a8>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d869      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 800129e:	4a94      	ldr	r2, [pc, #592]	; (80014f0 <HAL_GPIO_Init+0x2ac>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d04c      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 80012a4:	4a92      	ldr	r2, [pc, #584]	; (80014f0 <HAL_GPIO_Init+0x2ac>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d863      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 80012aa:	4a92      	ldr	r2, [pc, #584]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d046      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 80012b0:	4a90      	ldr	r2, [pc, #576]	; (80014f4 <HAL_GPIO_Init+0x2b0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d85d      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 80012b6:	2b12      	cmp	r3, #18
 80012b8:	d82a      	bhi.n	8001310 <HAL_GPIO_Init+0xcc>
 80012ba:	2b12      	cmp	r3, #18
 80012bc:	d859      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 80012be:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <HAL_GPIO_Init+0x80>)
 80012c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c4:	0800133f 	.word	0x0800133f
 80012c8:	08001319 	.word	0x08001319
 80012cc:	0800132b 	.word	0x0800132b
 80012d0:	0800136d 	.word	0x0800136d
 80012d4:	08001373 	.word	0x08001373
 80012d8:	08001373 	.word	0x08001373
 80012dc:	08001373 	.word	0x08001373
 80012e0:	08001373 	.word	0x08001373
 80012e4:	08001373 	.word	0x08001373
 80012e8:	08001373 	.word	0x08001373
 80012ec:	08001373 	.word	0x08001373
 80012f0:	08001373 	.word	0x08001373
 80012f4:	08001373 	.word	0x08001373
 80012f8:	08001373 	.word	0x08001373
 80012fc:	08001373 	.word	0x08001373
 8001300:	08001373 	.word	0x08001373
 8001304:	08001373 	.word	0x08001373
 8001308:	08001321 	.word	0x08001321
 800130c:	08001335 	.word	0x08001335
 8001310:	4a79      	ldr	r2, [pc, #484]	; (80014f8 <HAL_GPIO_Init+0x2b4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001316:	e02c      	b.n	8001372 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e029      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	3304      	adds	r3, #4
 8001326:	623b      	str	r3, [r7, #32]
          break;
 8001328:	e024      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	3308      	adds	r3, #8
 8001330:	623b      	str	r3, [r7, #32]
          break;
 8001332:	e01f      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	330c      	adds	r3, #12
 800133a:	623b      	str	r3, [r7, #32]
          break;
 800133c:	e01a      	b.n	8001374 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001346:	2304      	movs	r3, #4
 8001348:	623b      	str	r3, [r7, #32]
          break;
 800134a:	e013      	b.n	8001374 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d105      	bne.n	8001360 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001354:	2308      	movs	r3, #8
 8001356:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	611a      	str	r2, [r3, #16]
          break;
 800135e:	e009      	b.n	8001374 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001360:	2308      	movs	r3, #8
 8001362:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	615a      	str	r2, [r3, #20]
          break;
 800136a:	e003      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
          break;
 8001370:	e000      	b.n	8001374 <HAL_GPIO_Init+0x130>
          break;
 8001372:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2bff      	cmp	r3, #255	; 0xff
 8001378:	d801      	bhi.n	800137e <HAL_GPIO_Init+0x13a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	e001      	b.n	8001382 <HAL_GPIO_Init+0x13e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3304      	adds	r3, #4
 8001382:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2bff      	cmp	r3, #255	; 0xff
 8001388:	d802      	bhi.n	8001390 <HAL_GPIO_Init+0x14c>
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	e002      	b.n	8001396 <HAL_GPIO_Init+0x152>
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	3b08      	subs	r3, #8
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	210f      	movs	r1, #15
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	401a      	ands	r2, r3
 80013a8:	6a39      	ldr	r1, [r7, #32]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	431a      	orrs	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 80b1 	beq.w	8001526 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013c4:	4b4d      	ldr	r3, [pc, #308]	; (80014fc <HAL_GPIO_Init+0x2b8>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	; (80014fc <HAL_GPIO_Init+0x2b8>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <HAL_GPIO_Init+0x2b8>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013dc:	4a48      	ldr	r2, [pc, #288]	; (8001500 <HAL_GPIO_Init+0x2bc>)
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	220f      	movs	r2, #15
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4013      	ands	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a40      	ldr	r2, [pc, #256]	; (8001504 <HAL_GPIO_Init+0x2c0>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d013      	beq.n	8001430 <HAL_GPIO_Init+0x1ec>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a3f      	ldr	r2, [pc, #252]	; (8001508 <HAL_GPIO_Init+0x2c4>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d00d      	beq.n	800142c <HAL_GPIO_Init+0x1e8>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a3e      	ldr	r2, [pc, #248]	; (800150c <HAL_GPIO_Init+0x2c8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d007      	beq.n	8001428 <HAL_GPIO_Init+0x1e4>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a3d      	ldr	r2, [pc, #244]	; (8001510 <HAL_GPIO_Init+0x2cc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d101      	bne.n	8001424 <HAL_GPIO_Init+0x1e0>
 8001420:	2303      	movs	r3, #3
 8001422:	e006      	b.n	8001432 <HAL_GPIO_Init+0x1ee>
 8001424:	2304      	movs	r3, #4
 8001426:	e004      	b.n	8001432 <HAL_GPIO_Init+0x1ee>
 8001428:	2302      	movs	r3, #2
 800142a:	e002      	b.n	8001432 <HAL_GPIO_Init+0x1ee>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <HAL_GPIO_Init+0x1ee>
 8001430:	2300      	movs	r3, #0
 8001432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001434:	f002 0203 	and.w	r2, r2, #3
 8001438:	0092      	lsls	r2, r2, #2
 800143a:	4093      	lsls	r3, r2
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001442:	492f      	ldr	r1, [pc, #188]	; (8001500 <HAL_GPIO_Init+0x2bc>)
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3302      	adds	r3, #2
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800145c:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	492c      	ldr	r1, [pc, #176]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800146a:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	43db      	mvns	r3, r3
 8001472:	4928      	ldr	r1, [pc, #160]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 8001474:	4013      	ands	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d006      	beq.n	8001492 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	4922      	ldr	r1, [pc, #136]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	43db      	mvns	r3, r3
 800149a:	491e      	ldr	r1, [pc, #120]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 800149c:	4013      	ands	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	4918      	ldr	r1, [pc, #96]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	608b      	str	r3, [r1, #8]
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	4914      	ldr	r1, [pc, #80]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d021      	beq.n	8001518 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	490e      	ldr	r1, [pc, #56]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	60cb      	str	r3, [r1, #12]
 80014e0:	e021      	b.n	8001526 <HAL_GPIO_Init+0x2e2>
 80014e2:	bf00      	nop
 80014e4:	10320000 	.word	0x10320000
 80014e8:	10310000 	.word	0x10310000
 80014ec:	10220000 	.word	0x10220000
 80014f0:	10210000 	.word	0x10210000
 80014f4:	10120000 	.word	0x10120000
 80014f8:	10110000 	.word	0x10110000
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010000 	.word	0x40010000
 8001504:	40010800 	.word	0x40010800
 8001508:	40010c00 	.word	0x40010c00
 800150c:	40011000 	.word	0x40011000
 8001510:	40011400 	.word	0x40011400
 8001514:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_GPIO_Init+0x304>)
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	43db      	mvns	r3, r3
 8001520:	4909      	ldr	r1, [pc, #36]	; (8001548 <HAL_GPIO_Init+0x304>)
 8001522:	4013      	ands	r3, r2
 8001524:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	3301      	adds	r3, #1
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	fa22 f303 	lsr.w	r3, r2, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	f47f ae8e 	bne.w	8001258 <HAL_GPIO_Init+0x14>
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	372c      	adds	r7, #44	; 0x2c
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	40010400 	.word	0x40010400

0800154c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e12b      	b.n	80017b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d106      	bne.n	8001578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7fe fe58 	bl	8000228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2224      	movs	r2, #36	; 0x24
 800157c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0201 	bic.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800159e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015b0:	f002 fc54 	bl	8003e5c <HAL_RCC_GetPCLK1Freq>
 80015b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4a81      	ldr	r2, [pc, #516]	; (80017c0 <HAL_I2C_Init+0x274>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d807      	bhi.n	80015d0 <HAL_I2C_Init+0x84>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4a80      	ldr	r2, [pc, #512]	; (80017c4 <HAL_I2C_Init+0x278>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	bf94      	ite	ls
 80015c8:	2301      	movls	r3, #1
 80015ca:	2300      	movhi	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	e006      	b.n	80015de <HAL_I2C_Init+0x92>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4a7d      	ldr	r2, [pc, #500]	; (80017c8 <HAL_I2C_Init+0x27c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	bf94      	ite	ls
 80015d8:	2301      	movls	r3, #1
 80015da:	2300      	movhi	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0e7      	b.n	80017b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4a78      	ldr	r2, [pc, #480]	; (80017cc <HAL_I2C_Init+0x280>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	0c9b      	lsrs	r3, r3, #18
 80015f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	430a      	orrs	r2, r1
 8001604:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a6a      	ldr	r2, [pc, #424]	; (80017c0 <HAL_I2C_Init+0x274>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d802      	bhi.n	8001620 <HAL_I2C_Init+0xd4>
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	3301      	adds	r3, #1
 800161e:	e009      	b.n	8001634 <HAL_I2C_Init+0xe8>
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001626:	fb02 f303 	mul.w	r3, r2, r3
 800162a:	4a69      	ldr	r2, [pc, #420]	; (80017d0 <HAL_I2C_Init+0x284>)
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	099b      	lsrs	r3, r3, #6
 8001632:	3301      	adds	r3, #1
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	430b      	orrs	r3, r1
 800163a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001646:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	495c      	ldr	r1, [pc, #368]	; (80017c0 <HAL_I2C_Init+0x274>)
 8001650:	428b      	cmp	r3, r1
 8001652:	d819      	bhi.n	8001688 <HAL_I2C_Init+0x13c>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1e59      	subs	r1, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001662:	1c59      	adds	r1, r3, #1
 8001664:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001668:	400b      	ands	r3, r1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00a      	beq.n	8001684 <HAL_I2C_Init+0x138>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	1e59      	subs	r1, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fbb1 f3f3 	udiv	r3, r1, r3
 800167c:	3301      	adds	r3, #1
 800167e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001682:	e051      	b.n	8001728 <HAL_I2C_Init+0x1dc>
 8001684:	2304      	movs	r3, #4
 8001686:	e04f      	b.n	8001728 <HAL_I2C_Init+0x1dc>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d111      	bne.n	80016b4 <HAL_I2C_Init+0x168>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	1e58      	subs	r0, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	440b      	add	r3, r1
 800169e:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a2:	3301      	adds	r3, #1
 80016a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bf0c      	ite	eq
 80016ac:	2301      	moveq	r3, #1
 80016ae:	2300      	movne	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	e012      	b.n	80016da <HAL_I2C_Init+0x18e>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	1e58      	subs	r0, r3, #1
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6859      	ldr	r1, [r3, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	0099      	lsls	r1, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ca:	3301      	adds	r3, #1
 80016cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	bf0c      	ite	eq
 80016d4:	2301      	moveq	r3, #1
 80016d6:	2300      	movne	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_I2C_Init+0x196>
 80016de:	2301      	movs	r3, #1
 80016e0:	e022      	b.n	8001728 <HAL_I2C_Init+0x1dc>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10e      	bne.n	8001708 <HAL_I2C_Init+0x1bc>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1e58      	subs	r0, r3, #1
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6859      	ldr	r1, [r3, #4]
 80016f2:	460b      	mov	r3, r1
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	440b      	add	r3, r1
 80016f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fc:	3301      	adds	r3, #1
 80016fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001706:	e00f      	b.n	8001728 <HAL_I2C_Init+0x1dc>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1e58      	subs	r0, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6859      	ldr	r1, [r3, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	0099      	lsls	r1, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	fbb0 f3f3 	udiv	r3, r0, r3
 800171e:	3301      	adds	r3, #1
 8001720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001724:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	6809      	ldr	r1, [r1, #0]
 800172c:	4313      	orrs	r3, r2
 800172e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69da      	ldr	r2, [r3, #28]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001756:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6911      	ldr	r1, [r2, #16]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68d2      	ldr	r2, [r2, #12]
 8001762:	4311      	orrs	r1, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	430b      	orrs	r3, r1
 800176a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695a      	ldr	r2, [r3, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2220      	movs	r2, #32
 80017a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	000186a0 	.word	0x000186a0
 80017c4:	001e847f 	.word	0x001e847f
 80017c8:	003d08ff 	.word	0x003d08ff
 80017cc:	431bde83 	.word	0x431bde83
 80017d0:	10624dd3 	.word	0x10624dd3

080017d4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	461a      	mov	r2, r3
 80017e0:	460b      	mov	r3, r1
 80017e2:	817b      	strh	r3, [r7, #10]
 80017e4:	4613      	mov	r3, r2
 80017e6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b20      	cmp	r3, #32
 80017f6:	f040 8105 	bne.w	8001a04 <HAL_I2C_Master_Transmit_DMA+0x230>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80017fa:	4b85      	ldr	r3, [pc, #532]	; (8001a10 <HAL_I2C_Master_Transmit_DMA+0x23c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	08db      	lsrs	r3, r3, #3
 8001800:	4a84      	ldr	r2, [pc, #528]	; (8001a14 <HAL_I2C_Master_Transmit_DMA+0x240>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	0a1a      	lsrs	r2, r3, #8
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	009a      	lsls	r2, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	3b01      	subs	r3, #1
 8001818:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d116      	bne.n	800184e <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2220      	movs	r2, #32
 800182a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f043 0220 	orr.w	r2, r3, #32
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0db      	b.n	8001a06 <HAL_I2C_Master_Transmit_DMA+0x232>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b02      	cmp	r3, #2
 800185a:	d0db      	beq.n	8001814 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_I2C_Master_Transmit_DMA+0x96>
 8001866:	2302      	movs	r3, #2
 8001868:	e0cd      	b.n	8001a06 <HAL_I2C_Master_Transmit_DMA+0x232>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b01      	cmp	r3, #1
 800187e:	d007      	beq.n	8001890 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0201 	orr.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800189e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2221      	movs	r2, #33	; 0x21
 80018a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2210      	movs	r2, #16
 80018ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2200      	movs	r2, #0
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	893a      	ldrh	r2, [r7, #8]
 80018c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_I2C_Master_Transmit_DMA+0x244>)
 80018d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80018d2:	897a      	ldrh	r2, [r7, #10]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d073      	beq.n	80019c8 <HAL_I2C_Master_Transmit_DMA+0x1f4>
    {
      if (hi2c->hdmatx != NULL)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d022      	beq.n	800192e <HAL_I2C_Master_Transmit_DMA+0x15a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ec:	4a4b      	ldr	r2, [pc, #300]	; (8001a1c <HAL_I2C_Master_Transmit_DMA+0x248>)
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f4:	4a4a      	ldr	r2, [pc, #296]	; (8001a20 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fc:	2200      	movs	r2, #0
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001904:	2200      	movs	r2, #0
 8001906:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	4619      	mov	r1, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3310      	adds	r3, #16
 8001918:	461a      	mov	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191e:	f7ff fa7b 	bl	8000e18 <HAL_DMA_Start_IT>
 8001922:	4603      	mov	r3, r0
 8001924:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001926:	7dfb      	ldrb	r3, [r7, #23]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d139      	bne.n	80019a0 <HAL_I2C_Master_Transmit_DMA+0x1cc>
 800192c:	e013      	b.n	8001956 <HAL_I2C_Master_Transmit_DMA+0x182>
        hi2c->State     = HAL_I2C_STATE_READY;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2220      	movs	r2, #32
 8001932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e057      	b.n	8001a06 <HAL_I2C_Master_Transmit_DMA+0x232>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800196c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800197c:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800198c:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	e02f      	b.n	8001a00 <HAL_I2C_Master_Transmit_DMA+0x22c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2220      	movs	r2, #32
 80019a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f043 0210 	orr.w	r2, r3, #16
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e01e      	b.n	8001a06 <HAL_I2C_Master_Transmit_DMA+0x232>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019d6:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019e6:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80019fe:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e000      	b.n	8001a06 <HAL_I2C_Master_Transmit_DMA+0x232>
  }
  else
  {
    return HAL_BUSY;
 8001a04:	2302      	movs	r3, #2
  }
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000008 	.word	0x20000008
 8001a14:	14f8b589 	.word	0x14f8b589
 8001a18:	ffff0000 	.word	0xffff0000
 8001a1c:	08003205 	.word	0x08003205
 8001a20:	080033af 	.word	0x080033af

08001a24 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	460b      	mov	r3, r1
 8001a32:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001a34:	f7ff f87e 	bl	8000b34 <HAL_GetTick>
 8001a38:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b20      	cmp	r3, #32
 8001a48:	f040 8111 	bne.w	8001c6e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2319      	movs	r3, #25
 8001a52:	2201      	movs	r2, #1
 8001a54:	4988      	ldr	r1, [pc, #544]	; (8001c78 <HAL_I2C_IsDeviceReady+0x254>)
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f001 fd88 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001a62:	2302      	movs	r3, #2
 8001a64:	e104      	b.n	8001c70 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_I2C_IsDeviceReady+0x50>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e0fd      	b.n	8001c70 <HAL_I2C_IsDeviceReady+0x24c>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d007      	beq.n	8001a9a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f042 0201 	orr.w	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aa8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2224      	movs	r2, #36	; 0x24
 8001aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4a70      	ldr	r2, [pc, #448]	; (8001c7c <HAL_I2C_IsDeviceReady+0x258>)
 8001abc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001acc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f001 fd46 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00d      	beq.n	8001b02 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001af4:	d103      	bne.n	8001afe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e0b6      	b.n	8001c70 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b02:	897b      	ldrh	r3, [r7, #10]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b10:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001b12:	f7ff f80f 	bl	8000b34 <HAL_GetTick>
 8001b16:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	bf0c      	ite	eq
 8001b26:	2301      	moveq	r3, #1
 8001b28:	2300      	movne	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3c:	bf0c      	ite	eq
 8001b3e:	2301      	moveq	r3, #1
 8001b40:	2300      	movne	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b46:	e025      	b.n	8001b94 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b48:	f7fe fff4 	bl	8000b34 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d302      	bcc.n	8001b5e <HAL_I2C_IsDeviceReady+0x13a>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d103      	bne.n	8001b66 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	22a0      	movs	r2, #160	; 0xa0
 8001b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	bf0c      	ite	eq
 8001b74:	2301      	moveq	r3, #1
 8001b76:	2300      	movne	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2ba0      	cmp	r3, #160	; 0xa0
 8001b9e:	d005      	beq.n	8001bac <HAL_I2C_IsDeviceReady+0x188>
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d102      	bne.n	8001bac <HAL_I2C_IsDeviceReady+0x188>
 8001ba6:	7dbb      	ldrb	r3, [r7, #22]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0cd      	beq.n	8001b48 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d129      	bne.n	8001c16 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2319      	movs	r3, #25
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4921      	ldr	r1, [pc, #132]	; (8001c78 <HAL_I2C_IsDeviceReady+0x254>)
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f001 fcba 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e036      	b.n	8001c70 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2220      	movs	r2, #32
 8001c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e02c      	b.n	8001c70 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c24:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c2e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2319      	movs	r3, #25
 8001c36:	2201      	movs	r2, #1
 8001c38:	490f      	ldr	r1, [pc, #60]	; (8001c78 <HAL_I2C_IsDeviceReady+0x254>)
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f001 fc96 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e012      	b.n	8001c70 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	f4ff af32 	bcc.w	8001abe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001c6e:	2302      	movs	r3, #2
  }
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	00100002 	.word	0x00100002
 8001c7c:	ffff0000 	.word	0xffff0000

08001c80 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ca0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	2b10      	cmp	r3, #16
 8001cae:	d003      	beq.n	8001cb8 <HAL_I2C_EV_IRQHandler+0x38>
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	2b40      	cmp	r3, #64	; 0x40
 8001cb4:	f040 80c1 	bne.w	8001e3a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10d      	bne.n	8001cee <HAL_I2C_EV_IRQHandler+0x6e>
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001cd8:	d003      	beq.n	8001ce2 <HAL_I2C_EV_IRQHandler+0x62>
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001ce0:	d101      	bne.n	8001ce6 <HAL_I2C_EV_IRQHandler+0x66>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_I2C_EV_IRQHandler+0x68>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	f000 8132 	beq.w	8001f52 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00c      	beq.n	8001d12 <HAL_I2C_EV_IRQHandler+0x92>
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	0a5b      	lsrs	r3, r3, #9
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f001 fcbb 	bl	8003680 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fcc8 	bl	80026a0 <I2C_Master_SB>
 8001d10:	e092      	b.n	8001e38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	08db      	lsrs	r3, r3, #3
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_I2C_EV_IRQHandler+0xb2>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	0a5b      	lsrs	r3, r3, #9
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 fd3d 	bl	80027aa <I2C_Master_ADD10>
 8001d30:	e082      	b.n	8001e38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	085b      	lsrs	r3, r3, #1
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d009      	beq.n	8001d52 <HAL_I2C_EV_IRQHandler+0xd2>
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	0a5b      	lsrs	r3, r3, #9
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fd56 	bl	80027fc <I2C_Master_ADDR>
 8001d50:	e072      	b.n	8001e38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d03b      	beq.n	8001dd6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d6c:	f000 80f3 	beq.w	8001f56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	09db      	lsrs	r3, r3, #7
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00f      	beq.n	8001d9c <HAL_I2C_EV_IRQHandler+0x11c>
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	0a9b      	lsrs	r3, r3, #10
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d009      	beq.n	8001d9c <HAL_I2C_EV_IRQHandler+0x11c>
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d103      	bne.n	8001d9c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f942 	bl	800201e <I2C_MasterTransmit_TXE>
 8001d9a:	e04d      	b.n	8001e38 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80d6 	beq.w	8001f56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	0a5b      	lsrs	r3, r3, #9
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80cf 	beq.w	8001f56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001db8:	7bbb      	ldrb	r3, [r7, #14]
 8001dba:	2b21      	cmp	r3, #33	; 0x21
 8001dbc:	d103      	bne.n	8001dc6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f9c9 	bl	8002156 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dc4:	e0c7      	b.n	8001f56 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	2b40      	cmp	r3, #64	; 0x40
 8001dca:	f040 80c4 	bne.w	8001f56 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 fa37 	bl	8002242 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dd4:	e0bf      	b.n	8001f56 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001de4:	f000 80b7 	beq.w	8001f56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	099b      	lsrs	r3, r3, #6
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00f      	beq.n	8001e14 <HAL_I2C_EV_IRQHandler+0x194>
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	0a9b      	lsrs	r3, r3, #10
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <HAL_I2C_EV_IRQHandler+0x194>
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d103      	bne.n	8001e14 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 faac 	bl	800236a <I2C_MasterReceive_RXNE>
 8001e12:	e011      	b.n	8001e38 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	089b      	lsrs	r3, r3, #2
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 809a 	beq.w	8001f56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	0a5b      	lsrs	r3, r3, #9
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8093 	beq.w	8001f56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fb4b 	bl	80024cc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e36:	e08e      	b.n	8001f56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e38:	e08d      	b.n	8001f56 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	e007      	b.n	8001e5c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	085b      	lsrs	r3, r3, #1
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d012      	beq.n	8001e8e <HAL_I2C_EV_IRQHandler+0x20e>
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	0a5b      	lsrs	r3, r3, #9
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00c      	beq.n	8001e8e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001e84:	69b9      	ldr	r1, [r7, #24]
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 ff0f 	bl	8002caa <I2C_Slave_ADDR>
 8001e8c:	e066      	b.n	8001f5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_I2C_EV_IRQHandler+0x22e>
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	0a5b      	lsrs	r3, r3, #9
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 ff4a 	bl	8002d40 <I2C_Slave_STOPF>
 8001eac:	e056      	b.n	8001f5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001eae:	7bbb      	ldrb	r3, [r7, #14]
 8001eb0:	2b21      	cmp	r3, #33	; 0x21
 8001eb2:	d002      	beq.n	8001eba <HAL_I2C_EV_IRQHandler+0x23a>
 8001eb4:	7bbb      	ldrb	r3, [r7, #14]
 8001eb6:	2b29      	cmp	r3, #41	; 0x29
 8001eb8:	d125      	bne.n	8001f06 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	09db      	lsrs	r3, r3, #7
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00f      	beq.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x266>
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	0a9b      	lsrs	r3, r3, #10
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x266>
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d103      	bne.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fe27 	bl	8002b32 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ee4:	e039      	b.n	8001f5a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	089b      	lsrs	r3, r3, #2
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d033      	beq.n	8001f5a <HAL_I2C_EV_IRQHandler+0x2da>
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	0a5b      	lsrs	r3, r3, #9
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d02d      	beq.n	8001f5a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fe54 	bl	8002bac <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f04:	e029      	b.n	8001f5a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	099b      	lsrs	r3, r3, #6
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00f      	beq.n	8001f32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	0a9b      	lsrs	r3, r3, #10
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d009      	beq.n	8001f32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d103      	bne.n	8001f32 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 fe5e 	bl	8002bec <I2C_SlaveReceive_RXNE>
 8001f30:	e014      	b.n	8001f5c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00e      	beq.n	8001f5c <HAL_I2C_EV_IRQHandler+0x2dc>
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	0a5b      	lsrs	r3, r3, #9
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d008      	beq.n	8001f5c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fe8c 	bl	8002c68 <I2C_SlaveReceive_BTF>
 8001f50:	e004      	b.n	8001f5c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001f52:	bf00      	nop
 8001f54:	e002      	b.n	8001f5c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f56:	bf00      	nop
 8001f58:	e000      	b.n	8001f5c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f5a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001f5c:	3720      	adds	r7, #32
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	70fb      	strb	r3, [r7, #3]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002034:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	d150      	bne.n	80020e6 <I2C_MasterTransmit_TXE+0xc8>
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	2b21      	cmp	r3, #33	; 0x21
 8002048:	d14d      	bne.n	80020e6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2b08      	cmp	r3, #8
 800204e:	d01d      	beq.n	800208c <I2C_MasterTransmit_TXE+0x6e>
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b20      	cmp	r3, #32
 8002054:	d01a      	beq.n	800208c <I2C_MasterTransmit_TXE+0x6e>
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800205c:	d016      	beq.n	800208c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800206c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2211      	movs	r2, #17
 8002072:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ff6c 	bl	8001f62 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800208a:	e060      	b.n	800214e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800209a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020aa:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b40      	cmp	r3, #64	; 0x40
 80020c4:	d107      	bne.n	80020d6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ff81 	bl	8001fd6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020d4:	e03b      	b.n	800214e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ff3f 	bl	8001f62 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020e4:	e033      	b.n	800214e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	2b21      	cmp	r3, #33	; 0x21
 80020ea:	d005      	beq.n	80020f8 <I2C_MasterTransmit_TXE+0xda>
 80020ec:	7bbb      	ldrb	r3, [r7, #14]
 80020ee:	2b40      	cmp	r3, #64	; 0x40
 80020f0:	d12d      	bne.n	800214e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	2b22      	cmp	r3, #34	; 0x22
 80020f6:	d12a      	bne.n	800214e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d108      	bne.n	8002114 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002110:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002112:	e01c      	b.n	800214e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b40      	cmp	r3, #64	; 0x40
 800211e:	d103      	bne.n	8002128 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f88e 	bl	8002242 <I2C_MemoryTransmit_TXE_BTF>
}
 8002126:	e012      	b.n	800214e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800214c:	e7ff      	b.n	800214e <I2C_MasterTransmit_TXE+0x130>
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b21      	cmp	r3, #33	; 0x21
 800216e:	d164      	bne.n	800223a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29b      	uxth	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d012      	beq.n	80021a0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	781a      	ldrb	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800219e:	e04c      	b.n	800223a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d01d      	beq.n	80021e2 <I2C_MasterTransmit_BTF+0x8c>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	d01a      	beq.n	80021e2 <I2C_MasterTransmit_BTF+0x8c>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021b2:	d016      	beq.n	80021e2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021c2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2211      	movs	r2, #17
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff fec1 	bl	8001f62 <HAL_I2C_MasterTxCpltCallback>
}
 80021e0:	e02b      	b.n	800223a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021f0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002200:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b40      	cmp	r3, #64	; 0x40
 800221a:	d107      	bne.n	800222c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff fed6 	bl	8001fd6 <HAL_I2C_MemTxCpltCallback>
}
 800222a:	e006      	b.n	800223a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff fe94 	bl	8001f62 <HAL_I2C_MasterTxCpltCallback>
}
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002250:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002256:	2b00      	cmp	r3, #0
 8002258:	d11d      	bne.n	8002296 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d10b      	bne.n	800227a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002266:	b2da      	uxtb	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002272:	1c9a      	adds	r2, r3, #2
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002278:	e073      	b.n	8002362 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227e:	b29b      	uxth	r3, r3
 8002280:	121b      	asrs	r3, r3, #8
 8002282:	b2da      	uxtb	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002294:	e065      	b.n	8002362 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229a:	2b01      	cmp	r3, #1
 800229c:	d10b      	bne.n	80022b6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022b4:	e055      	b.n	8002362 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d151      	bne.n	8002362 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	2b22      	cmp	r3, #34	; 0x22
 80022c2:	d10d      	bne.n	80022e0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022d2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022de:	e040      	b.n	8002362 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d015      	beq.n	8002316 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	2b21      	cmp	r3, #33	; 0x21
 80022ee:	d112      	bne.n	8002316 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	781a      	ldrb	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002314:	e025      	b.n	8002362 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231a:	b29b      	uxth	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d120      	bne.n	8002362 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	2b21      	cmp	r3, #33	; 0x21
 8002324:	d11d      	bne.n	8002362 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002334:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002344:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff fe3a 	bl	8001fd6 <HAL_I2C_MemTxCpltCallback>
}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b22      	cmp	r3, #34	; 0x22
 800237c:	f040 80a2 	bne.w	80024c4 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002384:	b29b      	uxth	r3, r3
 8002386:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b03      	cmp	r3, #3
 800238c:	d921      	bls.n	80023d2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	f040 8082 	bne.w	80024c4 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ce:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80023d0:	e078      	b.n	80024c4 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d074      	beq.n	80024c4 <I2C_MasterReceive_RXNE+0x15a>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d002      	beq.n	80023e6 <I2C_MasterReceive_RXNE+0x7c>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d16e      	bne.n	80024c4 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f001 f918 	bl	800361c <I2C_WaitOnSTOPRequestThroughIT>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d142      	bne.n	8002478 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002400:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002410:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b40      	cmp	r3, #64	; 0x40
 800244a:	d10a      	bne.n	8002462 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff fdc4 	bl	8001fe8 <HAL_I2C_MemRxCpltCallback>
}
 8002460:	e030      	b.n	80024c4 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2212      	movs	r2, #18
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff fd7f 	bl	8001f74 <HAL_I2C_MasterRxCpltCallback>
}
 8002476:	e025      	b.n	80024c4 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002486:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff fd9b 	bl	8001ffa <HAL_I2C_ErrorCallback>
}
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d11b      	bne.n	800251c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002510:	b29b      	uxth	r3, r3
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800251a:	e0bd      	b.n	8002698 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	2b03      	cmp	r3, #3
 8002524:	d129      	bne.n	800257a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002534:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b04      	cmp	r3, #4
 800253a:	d00a      	beq.n	8002552 <I2C_MasterReceive_BTF+0x86>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d007      	beq.n	8002552 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002550:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002578:	e08e      	b.n	8002698 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d176      	bne.n	8002672 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d002      	beq.n	8002590 <I2C_MasterReceive_BTF+0xc4>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b10      	cmp	r3, #16
 800258e:	d108      	bne.n	80025a2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e019      	b.n	80025d6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d002      	beq.n	80025ae <I2C_MasterReceive_BTF+0xe2>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d108      	bne.n	80025c0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e00a      	b.n	80025d6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	d007      	beq.n	80025d6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002630:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2220      	movs	r2, #32
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b40      	cmp	r3, #64	; 0x40
 8002644:	d10a      	bne.n	800265c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff fcc7 	bl	8001fe8 <HAL_I2C_MemRxCpltCallback>
}
 800265a:	e01d      	b.n	8002698 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2212      	movs	r2, #18
 8002668:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff fc82 	bl	8001f74 <HAL_I2C_MasterRxCpltCallback>
}
 8002670:	e012      	b.n	8002698 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b40      	cmp	r3, #64	; 0x40
 80026b2:	d117      	bne.n	80026e4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d109      	bne.n	80026d0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026cc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80026ce:	e067      	b.n	80027a0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	611a      	str	r2, [r3, #16]
}
 80026e2:	e05d      	b.n	80027a0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ec:	d133      	bne.n	8002756 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b21      	cmp	r3, #33	; 0x21
 80026f8:	d109      	bne.n	800270e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800270a:	611a      	str	r2, [r3, #16]
 800270c:	e008      	b.n	8002720 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	b2da      	uxtb	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002724:	2b00      	cmp	r3, #0
 8002726:	d004      	beq.n	8002732 <I2C_Master_SB+0x92>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	2b00      	cmp	r3, #0
 8002730:	d108      	bne.n	8002744 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002736:	2b00      	cmp	r3, #0
 8002738:	d032      	beq.n	80027a0 <I2C_Master_SB+0x100>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	2b00      	cmp	r3, #0
 8002742:	d02d      	beq.n	80027a0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002752:	605a      	str	r2, [r3, #4]
}
 8002754:	e024      	b.n	80027a0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10e      	bne.n	800277c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	b29b      	uxth	r3, r3
 8002764:	11db      	asrs	r3, r3, #7
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f003 0306 	and.w	r3, r3, #6
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f063 030f 	orn	r3, r3, #15
 8002772:	b2da      	uxtb	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	611a      	str	r2, [r3, #16]
}
 800277a:	e011      	b.n	80027a0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002780:	2b01      	cmp	r3, #1
 8002782:	d10d      	bne.n	80027a0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002788:	b29b      	uxth	r3, r3
 800278a:	11db      	asrs	r3, r3, #7
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f003 0306 	and.w	r3, r3, #6
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f063 030e 	orn	r3, r3, #14
 8002798:	b2da      	uxtb	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	611a      	str	r2, [r3, #16]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr

080027aa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d004      	beq.n	80027d0 <I2C_Master_ADD10+0x26>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d108      	bne.n	80027e2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00c      	beq.n	80027f2 <I2C_Master_ADD10+0x48>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027f0:	605a      	str	r2, [r3, #4]
  }
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b091      	sub	sp, #68	; 0x44
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800280a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b22      	cmp	r3, #34	; 0x22
 8002824:	f040 8174 	bne.w	8002b10 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10f      	bne.n	8002850 <I2C_Master_ADDR+0x54>
 8002830:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002834:	2b40      	cmp	r3, #64	; 0x40
 8002836:	d10b      	bne.n	8002850 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002838:	2300      	movs	r3, #0
 800283a:	633b      	str	r3, [r7, #48]	; 0x30
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	633b      	str	r3, [r7, #48]	; 0x30
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	633b      	str	r3, [r7, #48]	; 0x30
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	e16b      	b.n	8002b28 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002854:	2b00      	cmp	r3, #0
 8002856:	d11d      	bne.n	8002894 <I2C_Master_ADDR+0x98>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002860:	d118      	bne.n	8002894 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002862:	2300      	movs	r3, #0
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002886:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	651a      	str	r2, [r3, #80]	; 0x50
 8002892:	e149      	b.n	8002b28 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002898:	b29b      	uxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d113      	bne.n	80028c6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289e:	2300      	movs	r3, #0
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e120      	b.n	8002b08 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	f040 808a 	bne.w	80029e6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80028d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028d8:	d137      	bne.n	800294a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028e8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028f8:	d113      	bne.n	8002922 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002908:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	e0f2      	b.n	8002b08 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	623b      	str	r3, [r7, #32]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	623b      	str	r3, [r7, #32]
 8002936:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	e0de      	b.n	8002b08 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800294a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294c:	2b08      	cmp	r3, #8
 800294e:	d02e      	beq.n	80029ae <I2C_Master_ADDR+0x1b2>
 8002950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002952:	2b20      	cmp	r3, #32
 8002954:	d02b      	beq.n	80029ae <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002958:	2b12      	cmp	r3, #18
 800295a:	d102      	bne.n	8002962 <I2C_Master_ADDR+0x166>
 800295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295e:	2b01      	cmp	r3, #1
 8002960:	d125      	bne.n	80029ae <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	2b04      	cmp	r3, #4
 8002966:	d00e      	beq.n	8002986 <I2C_Master_ADDR+0x18a>
 8002968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296a:	2b02      	cmp	r3, #2
 800296c:	d00b      	beq.n	8002986 <I2C_Master_ADDR+0x18a>
 800296e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002970:	2b10      	cmp	r3, #16
 8002972:	d008      	beq.n	8002986 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	e007      	b.n	8002996 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002994:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	e0ac      	b.n	8002b08 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029bc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	e090      	b.n	8002b08 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d158      	bne.n	8002aa2 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80029f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d021      	beq.n	8002a3a <I2C_Master_ADDR+0x23e>
 80029f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d01e      	beq.n	8002a3a <I2C_Master_ADDR+0x23e>
 80029fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	d01b      	beq.n	8002a3a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a10:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	e012      	b.n	8002a60 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a48:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a6e:	d14b      	bne.n	8002b08 <I2C_Master_ADDR+0x30c>
 8002a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a76:	d00b      	beq.n	8002a90 <I2C_Master_ADDR+0x294>
 8002a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d008      	beq.n	8002a90 <I2C_Master_ADDR+0x294>
 8002a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d005      	beq.n	8002a90 <I2C_Master_ADDR+0x294>
 8002a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d002      	beq.n	8002a90 <I2C_Master_ADDR+0x294>
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d13b      	bne.n	8002b08 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	e032      	b.n	8002b08 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ab0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac0:	d117      	bne.n	8002af2 <I2C_Master_ADDR+0x2f6>
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ac8:	d00b      	beq.n	8002ae2 <I2C_Master_ADDR+0x2e6>
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d008      	beq.n	8002ae2 <I2C_Master_ADDR+0x2e6>
 8002ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d005      	beq.n	8002ae2 <I2C_Master_ADDR+0x2e6>
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d002      	beq.n	8002ae2 <I2C_Master_ADDR+0x2e6>
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d107      	bne.n	8002af2 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002af0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002b0e:	e00b      	b.n	8002b28 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
}
 8002b26:	e7ff      	b.n	8002b28 <I2C_Master_ADDR+0x32c>
 8002b28:	bf00      	nop
 8002b2a:	3744      	adds	r7, #68	; 0x44
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b084      	sub	sp, #16
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b40:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d02b      	beq.n	8002ba4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	781a      	ldrb	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d114      	bne.n	8002ba4 <I2C_SlaveTransmit_TXE+0x72>
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	2b29      	cmp	r3, #41	; 0x29
 8002b7e:	d111      	bne.n	8002ba4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b8e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2221      	movs	r2, #33	; 0x21
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2228      	movs	r2, #40	; 0x28
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff f9f1 	bl	8001f86 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d011      	beq.n	8002be2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	781a      	ldrb	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d02c      	beq.n	8002c60 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d114      	bne.n	8002c60 <I2C_SlaveReceive_RXNE+0x74>
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	2b2a      	cmp	r3, #42	; 0x2a
 8002c3a:	d111      	bne.n	8002c60 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2222      	movs	r2, #34	; 0x22
 8002c50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2228      	movs	r2, #40	; 0x28
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff f99c 	bl	8001f98 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d012      	beq.n	8002ca0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cc4:	2b28      	cmp	r3, #40	; 0x28
 8002cc6:	d127      	bne.n	8002d18 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	089b      	lsrs	r3, r3, #2
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	09db      	lsrs	r3, r3, #7
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d103      	bne.n	8002cfc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	81bb      	strh	r3, [r7, #12]
 8002cfa:	e002      	b.n	8002d02 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002d0a:	89ba      	ldrh	r2, [r7, #12]
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff f94a 	bl	8001faa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d16:	e00e      	b.n	8002d36 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d5e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002d60:	2300      	movs	r3, #0
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d9c:	d172      	bne.n	8002e84 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	2b22      	cmp	r3, #34	; 0x22
 8002da2:	d002      	beq.n	8002daa <I2C_Slave_STOPF+0x6a>
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b2a      	cmp	r3, #42	; 0x2a
 8002da8:	d135      	bne.n	8002e16 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f043 0204 	orr.w	r2, r3, #4
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ddc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe f9f4 	bl	80011d0 <HAL_DMA_GetState>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d049      	beq.n	8002e82 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	4a69      	ldr	r2, [pc, #420]	; (8002f98 <I2C_Slave_STOPF+0x258>)
 8002df4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe f86c 	bl	8000ed8 <HAL_DMA_Abort_IT>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d03d      	beq.n	8002e82 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e10:	4610      	mov	r0, r2
 8002e12:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e14:	e035      	b.n	8002e82 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f043 0204 	orr.w	r2, r3, #4
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e48:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe f9be 	bl	80011d0 <HAL_DMA_GetState>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d014      	beq.n	8002e84 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5e:	4a4e      	ldr	r2, [pc, #312]	; (8002f98 <I2C_Slave_STOPF+0x258>)
 8002e60:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe f836 	bl	8000ed8 <HAL_DMA_Abort_IT>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4798      	blx	r3
 8002e80:	e000      	b.n	8002e84 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e82:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d03e      	beq.n	8002f0c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d112      	bne.n	8002ec2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ecc:	2b40      	cmp	r3, #64	; 0x40
 8002ece:	d112      	bne.n	8002ef6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f043 0204 	orr.w	r2, r3, #4
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f843 	bl	8002fa0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002f1a:	e039      	b.n	8002f90 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8002f20:	d109      	bne.n	8002f36 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2228      	movs	r2, #40	; 0x28
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff f831 	bl	8001f98 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b28      	cmp	r3, #40	; 0x28
 8002f40:	d111      	bne.n	8002f66 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a15      	ldr	r2, [pc, #84]	; (8002f9c <I2C_Slave_STOPF+0x25c>)
 8002f46:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff f830 	bl	8001fc4 <HAL_I2C_ListenCpltCallback>
}
 8002f64:	e014      	b.n	8002f90 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	2b22      	cmp	r3, #34	; 0x22
 8002f6c:	d002      	beq.n	8002f74 <I2C_Slave_STOPF+0x234>
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	2b22      	cmp	r3, #34	; 0x22
 8002f72:	d10d      	bne.n	8002f90 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff f804 	bl	8001f98 <HAL_I2C_SlaveRxCpltCallback>
}
 8002f90:	bf00      	nop
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	0800341d 	.word	0x0800341d
 8002f9c:	ffff0000 	.word	0xffff0000

08002fa0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fb6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002fb8:	7bbb      	ldrb	r3, [r7, #14]
 8002fba:	2b10      	cmp	r3, #16
 8002fbc:	d002      	beq.n	8002fc4 <I2C_ITError+0x24>
 8002fbe:	7bbb      	ldrb	r3, [r7, #14]
 8002fc0:	2b40      	cmp	r3, #64	; 0x40
 8002fc2:	d10a      	bne.n	8002fda <I2C_ITError+0x3a>
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	2b22      	cmp	r3, #34	; 0x22
 8002fc8:	d107      	bne.n	8002fda <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fe0:	2b28      	cmp	r3, #40	; 0x28
 8002fe2:	d107      	bne.n	8002ff4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2228      	movs	r2, #40	; 0x28
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ff2:	e015      	b.n	8003020 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003002:	d00a      	beq.n	800301a <I2C_ITError+0x7a>
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b60      	cmp	r3, #96	; 0x60
 8003008:	d007      	beq.n	800301a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800302e:	d161      	bne.n	80030f4 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800303e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003044:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003048:	2b01      	cmp	r3, #1
 800304a:	d020      	beq.n	800308e <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003050:	4a6a      	ldr	r2, [pc, #424]	; (80031fc <I2C_ITError+0x25c>)
 8003052:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003058:	4618      	mov	r0, r3
 800305a:	f7fd ff3d 	bl	8000ed8 <HAL_DMA_Abort_IT>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 8089 	beq.w	8003178 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0201 	bic.w	r2, r2, #1
 8003074:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003088:	4610      	mov	r0, r2
 800308a:	4798      	blx	r3
 800308c:	e074      	b.n	8003178 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	4a5a      	ldr	r2, [pc, #360]	; (80031fc <I2C_ITError+0x25c>)
 8003094:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd ff1c 	bl	8000ed8 <HAL_DMA_Abort_IT>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d068      	beq.n	8003178 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d10b      	bne.n	80030cc <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0201 	bic.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030ee:	4610      	mov	r0, r2
 80030f0:	4798      	blx	r3
 80030f2:	e041      	b.n	8003178 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b60      	cmp	r3, #96	; 0x60
 80030fe:	d125      	bne.n	800314c <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003118:	2b40      	cmp	r3, #64	; 0x40
 800311a:	d10b      	bne.n	8003134 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7fe ff61 	bl	800200c <HAL_I2C_AbortCpltCallback>
 800314a:	e015      	b.n	8003178 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003156:	2b40      	cmp	r3, #64	; 0x40
 8003158:	d10b      	bne.n	8003172 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fe ff41 	bl	8001ffa <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10e      	bne.n	80031a6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003198:	2b00      	cmp	r3, #0
 800319a:	d104      	bne.n	80031a6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031b4:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031bc:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d113      	bne.n	80031f2 <I2C_ITError+0x252>
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b28      	cmp	r3, #40	; 0x28
 80031ce:	d110      	bne.n	80031f2 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a0b      	ldr	r2, [pc, #44]	; (8003200 <I2C_ITError+0x260>)
 80031d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7fe fee9 	bl	8001fc4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	0800341d 	.word	0x0800341d
 8003200:	ffff0000 	.word	0xffff0000

08003204 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003218:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003220:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003236:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003244:	2200      	movs	r2, #0
 8003246:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	2200      	movs	r2, #0
 8003256:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800325e:	2b21      	cmp	r3, #33	; 0x21
 8003260:	d007      	beq.n	8003272 <I2C_DMAXferCplt+0x6e>
 8003262:	7cfb      	ldrb	r3, [r7, #19]
 8003264:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8003268:	2b22      	cmp	r3, #34	; 0x22
 800326a:	d131      	bne.n	80032d0 <I2C_DMAXferCplt+0xcc>
 800326c:	7cbb      	ldrb	r3, [r7, #18]
 800326e:	2b20      	cmp	r3, #32
 8003270:	d12e      	bne.n	80032d0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003280:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2200      	movs	r2, #0
 8003286:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	2b29      	cmp	r3, #41	; 0x29
 800328c:	d10a      	bne.n	80032a4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2221      	movs	r2, #33	; 0x21
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2228      	movs	r2, #40	; 0x28
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800329c:	6978      	ldr	r0, [r7, #20]
 800329e:	f7fe fe72 	bl	8001f86 <HAL_I2C_SlaveTxCpltCallback>
 80032a2:	e00c      	b.n	80032be <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80032a4:	7cfb      	ldrb	r3, [r7, #19]
 80032a6:	2b2a      	cmp	r3, #42	; 0x2a
 80032a8:	d109      	bne.n	80032be <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2222      	movs	r2, #34	; 0x22
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2228      	movs	r2, #40	; 0x28
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032b8:	6978      	ldr	r0, [r7, #20]
 80032ba:	f7fe fe6d 	bl	8001f98 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80032cc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80032ce:	e06a      	b.n	80033a6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d064      	beq.n	80033a6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d107      	bne.n	80032f6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003304:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800330c:	d009      	beq.n	8003322 <I2C_DMAXferCplt+0x11e>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d006      	beq.n	8003322 <I2C_DMAXferCplt+0x11e>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800331a:	d002      	beq.n	8003322 <I2C_DMAXferCplt+0x11e>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b20      	cmp	r3, #32
 8003320:	d107      	bne.n	8003332 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003330:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003340:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003350:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2200      	movs	r2, #0
 8003356:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003360:	6978      	ldr	r0, [r7, #20]
 8003362:	f7fe fe4a 	bl	8001ffa <HAL_I2C_ErrorCallback>
}
 8003366:	e01e      	b.n	80033a6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	d10a      	bne.n	8003392 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2200      	movs	r2, #0
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800338a:	6978      	ldr	r0, [r7, #20]
 800338c:	f7fe fe2c 	bl	8001fe8 <HAL_I2C_MemRxCpltCallback>
}
 8003390:	e009      	b.n	80033a6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2212      	movs	r2, #18
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80033a0:	6978      	ldr	r0, [r7, #20]
 80033a2:	f7fe fde7 	bl	8001f74 <HAL_I2C_MasterRxCpltCallback>
}
 80033a6:	bf00      	nop
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c8:	2200      	movs	r2, #0
 80033ca:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	2200      	movs	r2, #0
 80033da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ea:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f043 0210 	orr.w	r2, r3, #16
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7fe fdf3 	bl	8001ffa <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003434:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003436:	4b4b      	ldr	r3, [pc, #300]	; (8003564 <I2C_DMAAbort+0x148>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	08db      	lsrs	r3, r3, #3
 800343c:	4a4a      	ldr	r2, [pc, #296]	; (8003568 <I2C_DMAAbort+0x14c>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	0a1a      	lsrs	r2, r3, #8
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	00da      	lsls	r2, r3, #3
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f043 0220 	orr.w	r2, r3, #32
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003462:	e00a      	b.n	800347a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3b01      	subs	r3, #1
 8003468:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003478:	d0ea      	beq.n	8003450 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003486:	2200      	movs	r2, #0
 8003488:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	2200      	movs	r2, #0
 8003498:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2200      	movs	r2, #0
 80034ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034bc:	2200      	movs	r2, #0
 80034be:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	2200      	movs	r2, #0
 80034ce:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b60      	cmp	r3, #96	; 0x60
 80034ea:	d10e      	bne.n	800350a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2200      	movs	r2, #0
 8003500:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003502:	6978      	ldr	r0, [r7, #20]
 8003504:	f7fe fd82 	bl	800200c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003508:	e027      	b.n	800355a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800350a:	7cfb      	ldrb	r3, [r7, #19]
 800350c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003510:	2b28      	cmp	r3, #40	; 0x28
 8003512:	d117      	bne.n	8003544 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003532:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2228      	movs	r2, #40	; 0x28
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003542:	e007      	b.n	8003554 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003554:	6978      	ldr	r0, [r7, #20]
 8003556:	f7fe fd50 	bl	8001ffa <HAL_I2C_ErrorCallback>
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000008 	.word	0x20000008
 8003568:	14f8b589 	.word	0x14f8b589

0800356c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800357c:	e025      	b.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d021      	beq.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003586:	f7fd fad5 	bl	8000b34 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d302      	bcc.n	800359c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d116      	bne.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e023      	b.n	8003612 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	0c1b      	lsrs	r3, r3, #16
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d10d      	bne.n	80035f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	43da      	mvns	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4013      	ands	r3, r2
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	bf0c      	ite	eq
 80035e6:	2301      	moveq	r3, #1
 80035e8:	2300      	movne	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	e00c      	b.n	800360a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	43da      	mvns	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	429a      	cmp	r2, r3
 800360e:	d0b6      	beq.n	800357e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003628:	4b13      	ldr	r3, [pc, #76]	; (8003678 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	08db      	lsrs	r3, r3, #3
 800362e:	4a13      	ldr	r2, [pc, #76]	; (800367c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003630:	fba2 2303 	umull	r2, r3, r2, r3
 8003634:	0a1a      	lsrs	r2, r3, #8
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3b01      	subs	r3, #1
 8003642:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d107      	bne.n	800365a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f043 0220 	orr.w	r2, r3, #32
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e008      	b.n	800366c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003668:	d0e9      	beq.n	800363e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	20000008 	.word	0x20000008
 800367c:	14f8b589 	.word	0x14f8b589

08003680 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003690:	d103      	bne.n	800369a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003698:	e007      	b.n	80036aa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80036a2:	d102      	bne.n	80036aa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2208      	movs	r2, #8
 80036a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e272      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 8087 	beq.w	80037e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036d4:	4b92      	ldr	r3, [pc, #584]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 030c 	and.w	r3, r3, #12
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d00c      	beq.n	80036fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036e0:	4b8f      	ldr	r3, [pc, #572]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d112      	bne.n	8003712 <HAL_RCC_OscConfig+0x5e>
 80036ec:	4b8c      	ldr	r3, [pc, #560]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f8:	d10b      	bne.n	8003712 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fa:	4b89      	ldr	r3, [pc, #548]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d06c      	beq.n	80037e0 <HAL_RCC_OscConfig+0x12c>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d168      	bne.n	80037e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e24c      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800371a:	d106      	bne.n	800372a <HAL_RCC_OscConfig+0x76>
 800371c:	4b80      	ldr	r3, [pc, #512]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a7f      	ldr	r2, [pc, #508]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	e02e      	b.n	8003788 <HAL_RCC_OscConfig+0xd4>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10c      	bne.n	800374c <HAL_RCC_OscConfig+0x98>
 8003732:	4b7b      	ldr	r3, [pc, #492]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a7a      	ldr	r2, [pc, #488]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	4b78      	ldr	r3, [pc, #480]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a77      	ldr	r2, [pc, #476]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e01d      	b.n	8003788 <HAL_RCC_OscConfig+0xd4>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003754:	d10c      	bne.n	8003770 <HAL_RCC_OscConfig+0xbc>
 8003756:	4b72      	ldr	r3, [pc, #456]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a71      	ldr	r2, [pc, #452]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 800375c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	4b6f      	ldr	r3, [pc, #444]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a6e      	ldr	r2, [pc, #440]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e00b      	b.n	8003788 <HAL_RCC_OscConfig+0xd4>
 8003770:	4b6b      	ldr	r3, [pc, #428]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a6a      	ldr	r2, [pc, #424]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	4b68      	ldr	r3, [pc, #416]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a67      	ldr	r2, [pc, #412]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003786:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d013      	beq.n	80037b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fd f9d0 	bl	8000b34 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003798:	f7fd f9cc 	bl	8000b34 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	; 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e200      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037aa:	4b5d      	ldr	r3, [pc, #372]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0xe4>
 80037b6:	e014      	b.n	80037e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fd f9bc 	bl	8000b34 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c0:	f7fd f9b8 	bl	8000b34 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	; 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e1ec      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d2:	4b53      	ldr	r3, [pc, #332]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x10c>
 80037de:	e000      	b.n	80037e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d063      	beq.n	80038b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037ee:	4b4c      	ldr	r3, [pc, #304]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037fa:	4b49      	ldr	r3, [pc, #292]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b08      	cmp	r3, #8
 8003804:	d11c      	bne.n	8003840 <HAL_RCC_OscConfig+0x18c>
 8003806:	4b46      	ldr	r3, [pc, #280]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d116      	bne.n	8003840 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003812:	4b43      	ldr	r3, [pc, #268]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <HAL_RCC_OscConfig+0x176>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d001      	beq.n	800382a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e1c0      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382a:	4b3d      	ldr	r3, [pc, #244]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4939      	ldr	r1, [pc, #228]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383e:	e03a      	b.n	80038b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d020      	beq.n	800388a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003848:	4b36      	ldr	r3, [pc, #216]	; (8003924 <HAL_RCC_OscConfig+0x270>)
 800384a:	2201      	movs	r2, #1
 800384c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384e:	f7fd f971 	bl	8000b34 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003856:	f7fd f96d 	bl	8000b34 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e1a1      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003868:	4b2d      	ldr	r3, [pc, #180]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f0      	beq.n	8003856 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003874:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	4927      	ldr	r1, [pc, #156]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003884:	4313      	orrs	r3, r2
 8003886:	600b      	str	r3, [r1, #0]
 8003888:	e015      	b.n	80038b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800388a:	4b26      	ldr	r3, [pc, #152]	; (8003924 <HAL_RCC_OscConfig+0x270>)
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fd f950 	bl	8000b34 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003898:	f7fd f94c 	bl	8000b34 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e180      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038aa:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d03a      	beq.n	8003938 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d019      	beq.n	80038fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ca:	4b17      	ldr	r3, [pc, #92]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d0:	f7fd f930 	bl	8000b34 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d8:	f7fd f92c 	bl	8000b34 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e160      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ea:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038f6:	2001      	movs	r0, #1
 80038f8:	f000 fac4 	bl	8003e84 <RCC_Delay>
 80038fc:	e01c      	b.n	8003938 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003904:	f7fd f916 	bl	8000b34 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390a:	e00f      	b.n	800392c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800390c:	f7fd f912 	bl	8000b34 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d908      	bls.n	800392c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e146      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000
 8003924:	42420000 	.word	0x42420000
 8003928:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392c:	4b92      	ldr	r3, [pc, #584]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e9      	bne.n	800390c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80a6 	beq.w	8003a92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003946:	2300      	movs	r3, #0
 8003948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394a:	4b8b      	ldr	r3, [pc, #556]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10d      	bne.n	8003972 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003956:	4b88      	ldr	r3, [pc, #544]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	4a87      	ldr	r2, [pc, #540]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 800395c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003960:	61d3      	str	r3, [r2, #28]
 8003962:	4b85      	ldr	r3, [pc, #532]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396e:	2301      	movs	r3, #1
 8003970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003972:	4b82      	ldr	r3, [pc, #520]	; (8003b7c <HAL_RCC_OscConfig+0x4c8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d118      	bne.n	80039b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800397e:	4b7f      	ldr	r3, [pc, #508]	; (8003b7c <HAL_RCC_OscConfig+0x4c8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a7e      	ldr	r2, [pc, #504]	; (8003b7c <HAL_RCC_OscConfig+0x4c8>)
 8003984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398a:	f7fd f8d3 	bl	8000b34 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003992:	f7fd f8cf 	bl	8000b34 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b64      	cmp	r3, #100	; 0x64
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e103      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	4b75      	ldr	r3, [pc, #468]	; (8003b7c <HAL_RCC_OscConfig+0x4c8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x312>
 80039b8:	4b6f      	ldr	r3, [pc, #444]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	4a6e      	ldr	r2, [pc, #440]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6213      	str	r3, [r2, #32]
 80039c4:	e02d      	b.n	8003a22 <HAL_RCC_OscConfig+0x36e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x334>
 80039ce:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	4a69      	ldr	r2, [pc, #420]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	6213      	str	r3, [r2, #32]
 80039da:	4b67      	ldr	r3, [pc, #412]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	4a66      	ldr	r2, [pc, #408]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	f023 0304 	bic.w	r3, r3, #4
 80039e4:	6213      	str	r3, [r2, #32]
 80039e6:	e01c      	b.n	8003a22 <HAL_RCC_OscConfig+0x36e>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2b05      	cmp	r3, #5
 80039ee:	d10c      	bne.n	8003a0a <HAL_RCC_OscConfig+0x356>
 80039f0:	4b61      	ldr	r3, [pc, #388]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4a60      	ldr	r2, [pc, #384]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039f6:	f043 0304 	orr.w	r3, r3, #4
 80039fa:	6213      	str	r3, [r2, #32]
 80039fc:	4b5e      	ldr	r3, [pc, #376]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	4a5d      	ldr	r2, [pc, #372]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6213      	str	r3, [r2, #32]
 8003a08:	e00b      	b.n	8003a22 <HAL_RCC_OscConfig+0x36e>
 8003a0a:	4b5b      	ldr	r3, [pc, #364]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	4a5a      	ldr	r2, [pc, #360]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a10:	f023 0301 	bic.w	r3, r3, #1
 8003a14:	6213      	str	r3, [r2, #32]
 8003a16:	4b58      	ldr	r3, [pc, #352]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	4a57      	ldr	r2, [pc, #348]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	f023 0304 	bic.w	r3, r3, #4
 8003a20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d015      	beq.n	8003a56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2a:	f7fd f883 	bl	8000b34 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a30:	e00a      	b.n	8003a48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a32:	f7fd f87f 	bl	8000b34 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e0b1      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a48:	4b4b      	ldr	r3, [pc, #300]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0ee      	beq.n	8003a32 <HAL_RCC_OscConfig+0x37e>
 8003a54:	e014      	b.n	8003a80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a56:	f7fd f86d 	bl	8000b34 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5c:	e00a      	b.n	8003a74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fd f869 	bl	8000b34 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e09b      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a74:	4b40      	ldr	r3, [pc, #256]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1ee      	bne.n	8003a5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d105      	bne.n	8003a92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a86:	4b3c      	ldr	r3, [pc, #240]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	4a3b      	ldr	r2, [pc, #236]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8087 	beq.w	8003baa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a9c:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 030c 	and.w	r3, r3, #12
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d061      	beq.n	8003b6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d146      	bne.n	8003b3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab0:	4b33      	ldr	r3, [pc, #204]	; (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab6:	f7fd f83d 	bl	8000b34 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abe:	f7fd f839 	bl	8000b34 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e06d      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad0:	4b29      	ldr	r3, [pc, #164]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f0      	bne.n	8003abe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	d108      	bne.n	8003af8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ae6:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	4921      	ldr	r1, [pc, #132]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003af8:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a19      	ldr	r1, [r3, #32]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	491b      	ldr	r1, [pc, #108]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b10:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b16:	f7fd f80d 	bl	8000b34 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1e:	f7fd f809 	bl	8000b34 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e03d      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x46a>
 8003b3c:	e035      	b.n	8003baa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3e:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fc fff6 	bl	8000b34 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4c:	f7fc fff2 	bl	8000b34 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e026      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x498>
 8003b6a:	e01e      	b.n	8003baa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d107      	bne.n	8003b84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e019      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40007000 	.word	0x40007000
 8003b80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_RCC_OscConfig+0x500>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d106      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d001      	beq.n	8003baa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0d0      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b6a      	ldr	r3, [pc, #424]	; (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d910      	bls.n	8003bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b67      	ldr	r3, [pc, #412]	; (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 0207 	bic.w	r2, r3, #7
 8003be2:	4965      	ldr	r1, [pc, #404]	; (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bea:	4b63      	ldr	r3, [pc, #396]	; (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e0b8      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d020      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c14:	4b59      	ldr	r3, [pc, #356]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4a58      	ldr	r2, [pc, #352]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c2c:	4b53      	ldr	r3, [pc, #332]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4a52      	ldr	r2, [pc, #328]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c38:	4b50      	ldr	r3, [pc, #320]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	494d      	ldr	r1, [pc, #308]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d040      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d107      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	4b47      	ldr	r3, [pc, #284]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d115      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e07f      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d107      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c76:	4b41      	ldr	r3, [pc, #260]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d109      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e073      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c86:	4b3d      	ldr	r3, [pc, #244]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e06b      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c96:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f023 0203 	bic.w	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4936      	ldr	r1, [pc, #216]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ca8:	f7fc ff44 	bl	8000b34 <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb0:	f7fc ff40 	bl	8000b34 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e053      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	4b2d      	ldr	r3, [pc, #180]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f003 020c 	and.w	r2, r3, #12
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d1eb      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd8:	4b27      	ldr	r3, [pc, #156]	; (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d210      	bcs.n	8003d08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce6:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 0207 	bic.w	r2, r3, #7
 8003cee:	4922      	ldr	r1, [pc, #136]	; (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf6:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d001      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e032      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d14:	4b19      	ldr	r3, [pc, #100]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4916      	ldr	r1, [pc, #88]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d32:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	490e      	ldr	r1, [pc, #56]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d46:	f000 f821 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	490a      	ldr	r1, [pc, #40]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003d58:	5ccb      	ldrb	r3, [r1, r3]
 8003d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5e:	4a09      	ldr	r2, [pc, #36]	; (8003d84 <HAL_RCC_ClockConfig+0x1cc>)
 8003d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_RCC_ClockConfig+0x1d0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc fea2 	bl	8000ab0 <HAL_InitTick>

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	08004ca8 	.word	0x08004ca8
 8003d84:	20000008 	.word	0x20000008
 8003d88:	2000000c 	.word	0x2000000c

08003d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d8c:	b490      	push	{r4, r7}
 8003d8e:	b08a      	sub	sp, #40	; 0x28
 8003d90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d92:	4b29      	ldr	r3, [pc, #164]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xac>)
 8003d94:	1d3c      	adds	r4, r7, #4
 8003d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d9c:	f240 2301 	movw	r3, #513	; 0x201
 8003da0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
 8003da6:	2300      	movs	r3, #0
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	2300      	movs	r3, #0
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003db6:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d002      	beq.n	8003dcc <HAL_RCC_GetSysClockFreq+0x40>
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d003      	beq.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x46>
 8003dca:	e02b      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dcc:	4b1c      	ldr	r3, [pc, #112]	; (8003e40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dce:	623b      	str	r3, [r7, #32]
      break;
 8003dd0:	e02b      	b.n	8003e2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	0c9b      	lsrs	r3, r3, #18
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	3328      	adds	r3, #40	; 0x28
 8003ddc:	443b      	add	r3, r7
 8003dde:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003de2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d012      	beq.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dee:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	0c5b      	lsrs	r3, r3, #17
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	3328      	adds	r3, #40	; 0x28
 8003dfa:	443b      	add	r3, r7
 8003dfc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	4a0e      	ldr	r2, [pc, #56]	; (8003e40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e06:	fb03 f202 	mul.w	r2, r3, r2
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
 8003e12:	e004      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	4a0b      	ldr	r2, [pc, #44]	; (8003e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e18:	fb02 f303 	mul.w	r3, r2, r3
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	623b      	str	r3, [r7, #32]
      break;
 8003e22:	e002      	b.n	8003e2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e24:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e26:	623b      	str	r3, [r7, #32]
      break;
 8003e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3728      	adds	r7, #40	; 0x28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc90      	pop	{r4, r7}
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	08003f3c 	.word	0x08003f3c
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	007a1200 	.word	0x007a1200
 8003e44:	003d0900 	.word	0x003d0900

08003e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e4c:	4b02      	ldr	r3, [pc, #8]	; (8003e58 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr
 8003e58:	20000008 	.word	0x20000008

08003e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e60:	f7ff fff2 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 8003e64:	4602      	mov	r2, r0
 8003e66:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	0a1b      	lsrs	r3, r3, #8
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	4903      	ldr	r1, [pc, #12]	; (8003e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e72:	5ccb      	ldrb	r3, [r1, r3]
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	08004cb8 	.word	0x08004cb8

08003e84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <RCC_Delay+0x34>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <RCC_Delay+0x38>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	0a5b      	lsrs	r3, r3, #9
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ea0:	bf00      	nop
  }
  while (Delay --);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1e5a      	subs	r2, r3, #1
 8003ea6:	60fa      	str	r2, [r7, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f9      	bne.n	8003ea0 <RCC_Delay+0x1c>
}
 8003eac:	bf00      	nop
 8003eae:	bf00      	nop
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr
 8003eb8:	20000008 	.word	0x20000008
 8003ebc:	10624dd3 	.word	0x10624dd3

08003ec0 <__libc_init_array>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	2600      	movs	r6, #0
 8003ec4:	4d0c      	ldr	r5, [pc, #48]	; (8003ef8 <__libc_init_array+0x38>)
 8003ec6:	4c0d      	ldr	r4, [pc, #52]	; (8003efc <__libc_init_array+0x3c>)
 8003ec8:	1b64      	subs	r4, r4, r5
 8003eca:	10a4      	asrs	r4, r4, #2
 8003ecc:	42a6      	cmp	r6, r4
 8003ece:	d109      	bne.n	8003ee4 <__libc_init_array+0x24>
 8003ed0:	f000 f822 	bl	8003f18 <_init>
 8003ed4:	2600      	movs	r6, #0
 8003ed6:	4d0a      	ldr	r5, [pc, #40]	; (8003f00 <__libc_init_array+0x40>)
 8003ed8:	4c0a      	ldr	r4, [pc, #40]	; (8003f04 <__libc_init_array+0x44>)
 8003eda:	1b64      	subs	r4, r4, r5
 8003edc:	10a4      	asrs	r4, r4, #2
 8003ede:	42a6      	cmp	r6, r4
 8003ee0:	d105      	bne.n	8003eee <__libc_init_array+0x2e>
 8003ee2:	bd70      	pop	{r4, r5, r6, pc}
 8003ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee8:	4798      	blx	r3
 8003eea:	3601      	adds	r6, #1
 8003eec:	e7ee      	b.n	8003ecc <__libc_init_array+0xc>
 8003eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef2:	4798      	blx	r3
 8003ef4:	3601      	adds	r6, #1
 8003ef6:	e7f2      	b.n	8003ede <__libc_init_array+0x1e>
 8003ef8:	08004cc0 	.word	0x08004cc0
 8003efc:	08004cc0 	.word	0x08004cc0
 8003f00:	08004cc0 	.word	0x08004cc0
 8003f04:	08004cc4 	.word	0x08004cc4

08003f08 <memset>:
 8003f08:	4603      	mov	r3, r0
 8003f0a:	4402      	add	r2, r0
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <memset+0xa>
 8003f10:	4770      	bx	lr
 8003f12:	f803 1b01 	strb.w	r1, [r3], #1
 8003f16:	e7f9      	b.n	8003f0c <memset+0x4>

08003f18 <_init>:
 8003f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1a:	bf00      	nop
 8003f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1e:	bc08      	pop	{r3}
 8003f20:	469e      	mov	lr, r3
 8003f22:	4770      	bx	lr

08003f24 <_fini>:
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	bf00      	nop
 8003f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	469e      	mov	lr, r3
 8003f2e:	4770      	bx	lr
